# Fastbike Longdistance Brouter Profile
#===============================================================================
# Brouter V1.7.4 or newer is needed
#
# A Brouter profile suited for bicycle long distance travels. It avoids bad 
# surfaces, hills and high traffic.
#
#-------------------------------------------------------------------------------

---context:global
#===============================================================================

# UI Parameters
#-------------------------------------------------------------------------------

# Bike and Biker centric parameters
assign Bike						1		# %Bike%						| Type of used bike (Air Drag & Rolling Resistance) | [1=Roadbike - Cat1 - Continental Grand Prix 5000 25mm Tube @ 5.5bar, 2=Gravel - Cat2 - Schwalbe G One RS 40mm Tube @ 3.1bar, 3=Touring - Cat1 - Schwalbe Marathon Plus 37mm Tube @ 4.0bar, 4=MTB - Cat3 - Conti Cross King Protection 58mm Tube @ 2.4bar, 5=Winter - Cat1 - Schwalbe Marathon Winter Plus 42mm Tube @ 2.0bar]
assign NominalPower				165		# %NominalPower%				| W - continuous available power of cyclist | number
assign SystemWeight				100		# %SystemWeight%				| kg - weight of system (bike+cyclist+luggage) | number
assign SlopeMax					8.0		# %SlopeMax% 					| % - maximum allowed slope (up & downhill, soft limit) | number

# Route centric parameters
assign TimeOptimalityPercentage	75		# %TimeOptimalityPercentage%	| % - 0% - energy optimized route, 100% - time optimized route | number
assign TrafficVehicleCost		70		# %TrafficVehicleCost%			| m - Cost per overtaking vehicle | number
assign StickToCycleRoute		false	# %StickToCycleRoute%			| cycle routes will be preferred | boolean
assign PreferGreen				true	# %PreferGreen%					| routes will prefer green environments | boolean
assign PreferWater				true	# %PreferWater%					| routes next to water or waterways are prefered | boolean
assign AvoidNoisyRoads			true	# %AvoidNoisyRoads%				| | boolean
assign AllowCarrying			true	# %AllowCarrying%				| allow carrying passages, e.g. steps | boolean
assign AllowFerries				false	# %AllowFerries%				| | boolean
assign PavedRoadsOnly			false	# %PavedRoadsOnly%				| | boolean

# Turn instruction settings
# (Removed "%" such that they do not show up in the UI but might be easily 
# added again)
assign turnInstructionMode			1		# turnInstructionMode				| Mode for the generated turn instructions | [0=none, 1=auto-choose, 2=locus-style, 3=osmand-style, 4=comment-style, 5=gpsies-style, 6=orux-style, 7=locus-old-style]
assign turnInstructionCatchingRange	40		# turnInstructionCatchingRange		| m - Within this distance several turning instructions are combined into one and the turning angles are better approximated to the general direction | number
assign turnInstructionRoundabouts	true	# turnInstructionRoundabouts		| Set false to avoid generating special turning instructions for roundabouts | boolean
assign considerTurnRestrictions		true	# considerTurnRestrictions			| Set true to take turn restrictions into account | b


# General routing parameters 
#-------------------------------------------------------------------------------

# Debug
assign processUnusedTags			false	# Set true to output unused tags in data tab

# way cost constants
assign gNoiseCost				   0.20	# Cost factor for noisy roads. Equivalent cost for having a way immediately next to a motorway (Autobahn)
assign gGreenCost				  -0.10	# Cost or incentive factor for green roads. Equivalent cost for a way through a forest or garden
assign gWaterCost				  -0.10	# Cost or incentive factor for roads next to water. Equivalent cost for having a way immediately next to a waterway
assign gCycleRouteCost			  -0.10	# Cost or incentive for cycle routs

# elevation parameter constants
assign gConsiderElevation		true	# elevation will be considered
assign gSlopeCutoff				   0.5	# slope is ignored if smaller than this threshold
assign elevationpenaltybuffer	   4
assign elevationmaxbuffer		   8

# Kinematic model parameters for speed calculation
assign gMaxBikerSpeed			  70
assign gCv					 	   0.1		# viscouse damping coefficient (dimensionless) - http://www.kreuzotter.de/deutsch/speedfaq.htm
assign gRho						   1.16038	# Air density in kg/m³ @ 20°C & 300m above sea level  - http://www.kreuzotter.de/deutsch/speedfaq.htm
assign gEta						   0.98		# Efficiency factor of the power transmission of the bike 

# Bike specific parameters
assign gCwA								# drag coefficient times the reference area in m^2 - http://www.kreuzotter.de/deutsch/speed.htm
	switch equal Bike 1			   0.50		# m² - Roadbike, bit higher than the given 0.4891m² (top handlebar) since I use a more relaxed Canyon Endurace
	switch equal Bike 2			   0.50		# m² - Gravel, bit higher than the given 0.4891m² for a road bike (top handlebar)
	switch equal Bike 3			   0.65		# m² - Tour, in between MTB and roadster
	switch equal Bike 4			   0.57		# m² - MTB without suspension
	switch equal Bike 5			   0.50		# m² - Winter, same as Tour
								999			# Error / will never be reaced
assign gCr					 			# rolling resistance coefficient (dimensionless)
	switch equal Bike 1			   0.00363	# Roadbike - Continental Grand Prix 5000   25mm Tube @ 5.5bar - https://www.bicyclerollingresistance.com/
	switch equal Bike 2			   0.00531	# Gravel   - Schwalbe G One RS             40mm Tube @ 3.1bar - https://www.bicyclerollingresistance.com/
	switch equal Bike 3			   0.00764	# Tour     - Schwalbe Marathon Plus        37mm Tube @ 4.0bar - https://www.bicyclerollingresistance.com/
	switch equal Bike 4			   0.00893	# MTB      - Conti Cross King Protection   58mm Tube @ 2.4bar - https://www.bicyclerollingresistance.com/
	switch equal Bike 5			   0.012	# Winter   - Schwalbe Marathon Winter Plus 42mm Tube @ 2.0bar - https://doi.org/10.1016/j.coldregions.2021.103282
								999			# Error / will never be reached
assign gTireWidth						# width of tires. Used to estimate the influence of the surface to the rolling resistance
	switch equal Bike 1			 28			# mm - Roadbike - Continental Grand Prix 5000   25mm Tube, but since I use the 28mm Variant --> 0.035 :-) 
	switch equal Bike 2			 40			# mm - Gravel   - Schwalbe G One RS             40mm Tube
	switch equal Bike 3			 37			# mm - Tour     - Schwalbe Marathon Plus        37mm Tube
	switch equal Bike 4			 58			# mm - MTB      - Conti Cross King Protection   58mm Tube
	switch equal Bike 5			 35			# mm - Winter   - Schwalbe Marathon Winter Plus 42mm Tubem, but since I use the 35mm Variant --> 0.035 :-) 
								999					# Error / will never be reaced
assign gTirePressure						# Pressure of tires. Used to estimate the influence of the surface to the rolling resistance
	switch equal Bike 1			   5.0		# bar - Roadbike - Continental Grand Prix 5000   25mm Tube, but I use the 28mm Variant --> 5.5 * 25/28bar=5.0bar
	switch equal Bike 2			   3.1		# bar - Gravel   - Schwalbe G One RS             40mm Tube
	switch equal Bike 3			   4.0		# bar - Tour     - Schwalbe Marathon Plus        37mm Tube
	switch equal Bike 4			   2.4		# bar - MTB      - Conti Cross King Protection   58mm Tube
	switch equal Bike 5			   2.4		# bar - Winter   - Schwalbe Marathon Winter Plus 42mm Tube, but I use the 35mm Variant --> 2.0 * 42/32bar=2.4bar
								999			# Error / will never be reaced
assign gBikeCategory						# Bike Category according to ASTM Classifikation ASTM F2043-13
	switch equal Bike 1			   1		# Roadbike
	switch equal Bike 2			   2		# Gravel
	switch equal Bike 3			   1		# Tour
	switch equal Bike 4			   3		# MTB XC
	switch equal Bike 5			   1		# Tour
								   1		# Error / will never be reaced - 1 is the worst case category

# brouter search algorithm
assign pass1coefficient			   1.5
assign pass2coefficient			   0


# Constants (not to be changed by the user)
#-------------------------------------------------------------------------------

# genaral constants
assign gGravity				9.81			# Gravity coefficient in N/kg

# set that this is a bike profile
assign validForBikes       	1

# classifier constants
assign gClassifierNone     	1
assign gClassifierWalking  	2
assign gClassifierFerry    	3


# Computed Constants
#-------------------------------------------------------------------------------

# scale
assign gTimeOptimalityFactor min 1 max 0 divide TimeOptimalityPercentage 100

# BRouter internal kinematic model parameters for travel time calculation
assign maxSpeed   min gMaxBikerSpeed 45				# absolute maximum speed in km/h for travel time computation
assign S_C_x      multiply 0.5 multiply gCwA gRho	# drag coefficient times the reference area times half the air density for travel time computation
assign C_r        multiply 1.5 gCr					# rolling resistance coefficient (dimensionless) for travel time computation -- 1.5x asphalt resistance as estimation
assign bikerPower multiply NominalPower gEta					# power times efficiency of the bike
assign totalMass  SystemWeight 


# Speed Parameter Calculation:
#-------------------------------------------------------------------------------
              
# Constants          
assign gSlopeStepSize	min 4 multiply 0.5 SlopeMax
assign gmPn				multiply -1   multiply NominalPower gEta
assign ghrhoCwA			multiply  0.5 multiply gRho gCwA


assign gv			20		# start value in m/s for root finding
# -2*Slopestepsize
assign gSlopem2		multiply -2 gSlopeStepSize
assign ggmCrSl		multiply gGravity multiply SystemWeight add gCr divide gSlopem2 100
# Iteration 1
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 2
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 3
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 4
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 5
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Result
assign gSpeedm2 multiply gv 3.6

# -Slopestepsize
# start gValue for gv is the result of the previous computation
assign gSlopem1		multiply -1 gSlopeStepSize
assign ggmCrSl		multiply gGravity multiply SystemWeight add gCr divide gSlopem1 100
# Iteration 1
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 2
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 3
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 4
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 5
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Result
assign gSpeedm1 multiply gv 3.6

# 0%
# start gValue for gv is the result of the previous computation
assign gSlope0		 0
assign ggmCrSl		multiply gGravity multiply SystemWeight add gCr divide gSlope0 100
# Iteration 1
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 2
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 3
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 4
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 5
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Result
assign gSpeed0 multiply gv 3.6

# Slopestepsize
# start gValue for gv is the result of the previous computation
assign gSlopep1		gSlopeStepSize
assign ggmCrSl		multiply gGravity multiply SystemWeight add gCr divide gSlopep1 100
# Iteration 1
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 2
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 3
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 4
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 5
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Result
assign gSpeedp1 multiply gv 3.6

# 2*Slopestepsize
# start gValue for gv is the result of the previous computation
assign gSlopep2		multiply 2 gSlopeStepSize
assign ggmCrSl		multiply gGravity multiply SystemWeight add gCr divide gSlopep2 100
# Iteration 1
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 2
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 3
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 4
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 5
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Result
assign gSpeedp2 multiply gv 3.6

# 3*Slopestepsize
# start gValue for gv is the result of the previous computation
assign gSlopep3		multiply 3 gSlopeStepSize
assign ggmCrSl		multiply gGravity multiply SystemWeight add gCr divide gSlopep3 100
# Iteration 1
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 2
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 3
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 4
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Iteration 5
assign gvvhrhoCwA	multiply gv multiply gv ghrhoCwA
assign gvCv			multiply gv gCv
assign gValue		add gmPn multiply gv add ggmCrSl add gvCv gvvhrhoCwA
assign gDerivative	add ggmCrSl add multiply 2 gvCv multiply 3 gvvhrhoCwA
assign gv			sub gv divide gValue gDerivative
# Result
assign gSpeedp3 multiply gv 3.6


# Push and Carry Cost Factors
#-------------------------------------------------------------------------------

# Energy needed for pushing: 12.2Wh/km
# Energy needed for cycling: NominalPower/gSpeed0 ==> 6.27 @ 165W, 26.3km/h
assign gPushCostFactor
	divide 12.5 divide NominalPower gSpeed0

# For carrying it is assumed, that the needed energy is trippled compared to
# pushing
assign gCarryCostFactor
	multiply 3 gPushCostFactor


# Elevation Cost Parameters
#-------------------------------------------------------------------------------

# compute equivalent length for one meter height. ==> 45.36 m/m for roadbike
assign gHeight2Length		
	multiply 
		divide 
			multiply SystemWeight gGravity
			NominalPower
		divide
			gSpeed0
			3.6

# Elevation value is reduced by this cutoff without penalizing the elevation.
assign downhillcutoff					gSlopeCutoff
assign uphillcutoff						gSlopeCutoff

# When reaching the "elevationbufferreduce" slope, uphillcostfactor (or 
# downhillcostfactor) are used by 100%
assign elevationbufferreduce			sub SlopeMax gSlopeCutoff

# When exceeding "uphillmaxslope", "uphillmaxslopecost" is used instead of 
# "uphillcost". Most likely = elevationbufferreduce
assign uphillmaxslope					sub SlopeMax gSlopeCutoff

# Uphill and downhill cost for the energy optimized situation.
assign uphillcost				# cost per vertical meter
	switch gConsiderElevation	
		multiply sub 1 gTimeOptimalityFactor gHeight2Length
		0
assign downhillcost				# cost per vertical meter
	switch gConsiderElevation
		multiply sub 1 gTimeOptimalityFactor 0
		0

# additional cost per vertical meter for slope larger than "slopemax"
# Cost due to the increased energy usage due to pushing the bike in steep hills
assign gUphillMaxSlopeAdditionalCost	multiply gHeight2Length sub gPushCostFactor 1
# Uphill cost for elevation exceeding the "uphillmaxslope" threshold
assign uphillmaxslopecost		add gUphillMaxSlopeAdditionalCost   uphillcost


# Constants depending on speed or elevation constants
#-------------------------------------------------------------------------------

# Costs to decelerate to lower speed and accelerate back again to cruising speed
assign gv0					divide gSpeed0	3.6		# Speed on flat terrain in m/s
assign gv5					divide 5		3.6		#  5km/h in m/s
assign gv10					divide 10		3.6		# 10km/h in m/s
assign gv15					divide 15		3.6		# 15km/h in m/s
assign gv20					divide 20		3.6		# 20km/h in m/s
assign gKineticEnergy		multiply 0.5 multiply SystemWeight multiply  gv0  gv0
assign gKineticEnergy5		multiply 0.5 multiply SystemWeight multiply  gv5  gv5
assign gKineticEnergy10		multiply 0.5 multiply SystemWeight multiply gv10 gv10
assign gKineticEnergy15		multiply 0.5 multiply SystemWeight multiply gv15 gv15
assign gKineticEnergy20		multiply 0.5 multiply SystemWeight multiply gv20 gv20
assign gSpeed0CostEnergy	multiply gv0 divide           gKineticEnergy                  NominalPower
assign gSpeed5CostEnergy	multiply gv0 divide max 0 sub gKineticEnergy gKineticEnergy5  NominalPower
assign gSpeed10CostEnergy	multiply gv0 divide max 0 sub gKineticEnergy gKineticEnergy10 NominalPower
assign gSpeed15CostEnergy	multiply gv0 divide max 0 sub gKineticEnergy gKineticEnergy15 NominalPower
assign gSpeed20CostEnergy	multiply gv0 divide max 0 sub gKineticEnergy gKineticEnergy20 NominalPower

# Linear interpolation between energy optimal cost and time optimal cost.
assign gFactor      sub 1 multiply 0.5 gTimeOptimalityFactor
assign gSpeed0Cost  multiply gFactor gSpeed0CostEnergy
assign gSpeed5Cost  multiply gFactor gSpeed5CostEnergy
assign gSpeed10Cost multiply gFactor gSpeed10CostEnergy
assign gSpeed15Cost multiply gFactor gSpeed15CostEnergy
assign gSpeed20Cost multiply gFactor gSpeed20CostEnergy

# initialPushCost 
assign gDismountCOGHeightDifference	0.15	# m - Difference of COG of biker between dismounted and mounted position
assign gDismountMountTime			4		# s - Time needed to dismount and mount back again
assign gInitialPushCost
	add gSpeed0Cost
	add multiply sub 1 gTimeOptimalityFactor
	    multiply gHeight2Length
		         gDismountCOGHeightDifference
		multiply gTimeOptimalityFactor
		multiply gv0
				 gDismountMountTime

# InitialFerryCost
assign gFerryWaitingTime	multiply 30 60	# s - Waiting time for ferry (assumed 
# one ferry every hour --> avg waiting time of 30min)
assign gInitialFerryCost
	add gInitialPushCost 
		multiply gTimeOptimalityFactor
		multiply gv0
		         gFerryWaitingTime

# trafficSignalCost
# cost for waiting at a traffic signal (90s traffic signal cycle time)
# for v = 26.3kmh --> Cost  = 147.2m
assign	gTrafficSignalCost
	add gSpeed0Cost multiply gTimeOptimalityFactor multiply 3.125 gSpeed0 



---context:way 
#===============================================================================


# Logic Values
#-------------------------------------------------------------------------------

# Cycleroute / Cycleway
#-------------------------------------------------------------------------------

# logical if way is part of a cycleroute
assign anyCycleroute 	 
	or route_bicycle_icn=yes 
	or route_bicycle_ncn=yes 
	or route_bicycle_rcn=yes 
	or route_bicycle_lcn=yes
	or route_bicycle_=yes
	or ncn=yes
	or rcn=yes
	   lcn=yes

# cycleway / Fahrradstreifen
# the flag is generated by checking if the opposite - so no cycleway - is true
# and than inverting this information
assign hasCycleway
	not and ( or cycleway=  cycleway=no|shared_lane|proposed ) 
		or  ( and     reversedirection=yes or cycleway:left=  cycleway:left=no|shared_lane   )		# shared lane are only bike signs on the street surface
		    ( and not reversedirection=yes or cycleway:right= cycleway:right=no|shared_lane  )
# https://taginfo.openstreetmap.org/keys/cycleway (11-2018)
# 750 000 tags "cycleway"
# 140 000 tags "cycleway:right"
#  60 000 tags "cycleway:left"
			
# protected bike lanes or bicycle roads
assign hasCyclewayTrack	
	or ( bicycle_road=yes )	#   7 342 tags "bicycle_road=yes"
	or ( cycleway=track ) 	# 114 000 tags "cycleway=track"
	or ( and     reversedirection=yes or cycleway:left=track|opposite_track or cycleway:right=opposite_track  cycleway=opposite_track )		
	   ( and not reversedirection=yes    cycleway:right=track )
# https://taginfo.openstreetmap.org/keys/cycleway (11-2018)
# 114 000 tags "cycleway=track"						
#  36 000 tags "cycleway:right=track"
#  14 000 tags "cycleway:left=track"
#   2 000 tags "cycleway=opposite_track"
#     300 tags "cycleway:right=opposite_track"
#     350 tags "cycleway:left=opposite_track"


# Access
#-------------------------------------------------------------------------------

# general access
assign defaultAccess
	if access=private|no then false
	else true

# bike access
assign bikeAccess
	if anyCycleroute then true
	else if bicycle= then
	(
		if vehicle= then
			if      highway=footway|pedestrian|steps then false
			else if foot=designated                  then false			# there are ways without vehicle or bicycle tag which are only a designated foot way.
			else defaultAccess
		else not vehicle=private|no
	)
	else not bicycle=private|no|dismount

# foot access
assign footAccess
	if bikeAccess then true
	else if bicycle=dismount then true
	else if foot= then defaultAccess
	else not foot=private|no

# oneway accessed in reversed and forbidden direction
assign badOneWay
	if reversedirection=yes then					
		if 		( oneway:bicycle=yes 									) then true	
		else if ( cycleway=opposite|opposite_lane|opposite_track 		) then false
		else if ( cycleway:left=opposite|opposite_lane|opposite_track	) then false
		else if ( cycleway:right=opposite|opposite_lane|opposite_track	) then false
		else if ( oneway:bicycle=no                               		) then false
		else if ( and oneway= junction=roundabout						) then true
		else if ( oneway=yes|true|1										) then true
		else false
	else 
		if 		( oneway=-1												) then true
		else false	

# Store if node access is granted independently of node type 
# if way is part of cycleroute, all nodes can be accessed
# "nodeaccessgranted" was the only "way" context variable which is available in 
# the "node" context. Nowadays, this restriction is not true anymore.
assign nodeaccessgranted 
	or anyCycleroute 
		lcn=yes


# Surfaces - Rolling Resistance
#-------------------------------------------------------------------------------

### Assign normalized rolling resistance coefficient

# Rolling resistance is the resistance coefficient for a car normalized to the 
# coefficient of perfect flat asphalt. (Thus asphalt has the value of 1 ;-) ) 
#
#								pavedRoadsOnly Cost		Normal Cost
assign asphaltRes		switch PavedRoadsOnly	 1.0	 1.0
assign concreteRes		switch PavedRoadsOnly	 1.1	 1.1
assign metalRes			switch PavedRoadsOnly	 1.1	 1.1
assign pavingStonesRes	switch PavedRoadsOnly	 1.5	 1.5
assign compactedRes		switch PavedRoadsOnly	11.8  	 1.8
assign woodRes			switch PavedRoadsOnly	 1.8	 1.8
assign settRes			switch PavedRoadsOnly	 2.0	 2.0
assign pebblestoneRes	switch PavedRoadsOnly	12.4  	 2.4
assign cobblestoneRes	switch PavedRoadsOnly	 2.5	 2.5
assign grassPaverRes	switch PavedRoadsOnly	12.7  	 2.7
assign gravelRes		switch PavedRoadsOnly	13.0  	 3.0
assign groundRes		switch PavedRoadsOnly	13.4	 3.4
assign fineGravelRes	switch PavedRoadsOnly	14.0	 4.0
assign dirtRes			switch PavedRoadsOnly	15.0	 5.0
assign sandRes			switch PavedRoadsOnly	20.0	10.0
assign mudRes			switch PavedRoadsOnly	25.0	15.0
assign pavingUnsureRes	groundRes


# Assign factor according to open street map tags
assign surfaceFactor	# 23Mio tags (11-2018) - https://taginfo.openstreetmap.org/keys/surface#values
	# 
	# Use cycleway surface with highest priority, since we use cycleways if 
	# available
	switch cycleway:surface=asphalt         asphaltRes
	switch cycleway:surface=concrete|paved  concreteRes
	switch cycleway:surface=paving_stones   pavingStonesRes
	switch cycleway:surface=compacted       compactedRes
	switch cycleway:surface=sett            settRes
	switch cycleway:surface=cobblestone     cobblestoneRes
	switch cycleway:surface=gravel          gravelRes
	switch cycleway:surface=fine_gravel     fineGravelRes
	switch cycleway:surface=unpaved         dirtRes
	#
	# Use smoothness key with next priority
	# http://wiki.openstreetmap.org/wiki/Key:smoothness
	switch smoothness=excellent|very_good		asphaltRes										# thin_rollers - roller blade, skate board
	switch smoothness=good		 				multiply 0.5 add 1.0 pavingStonesRes			# thin_wheels - racing bike
	switch smoothness=intermediate				pavingStonesRes									# wheels - city bike, wheel chair, sport cars
	switch smoothness=bad|robust_wheels			cobblestoneRes									# robust wheels - trekking bike, normal cars
	switch smoothness=very_bad|high_clearance	dirtRes											# high clearance - normal cars with slightly higher clearance
	switch smoothness=horrible|off_road_wheels	multiply 2 dirtRes								# off road wheels - off road cars 
	switch smoothness=very_horrible				mudRes											# specialized off road vehicles - ATV, tractor
	switch smoothness=impassable              	multiply 2 mudRes								# no wheeled vehicle - hiking path 
	#
	# Highway surface
	switch     surface=asphalt					asphaltRes
	switch and surface=concrete concrete=lanes	compactedRes
	switch and surface=concrete concrete=plates	pavingStonesRes
	switch     surface=concrete|paved 			concreteRes
	switch     surface=metal                    metalRes
	switch     surface=paving_stones            pavingStonesRes
	switch     surface=compacted|clay           compactedRes
	switch     surface=wood                     woodRes
	switch     surface=sett                     settRes
	switch     surface=pebblestone              pebblestoneRes
	switch     surface=cobblestone              cobblestoneRes
	switch     surface=grass_paver              grassPaverRes
	switch     surface=gravel                   gravelRes
	switch     surface=ground                   groundRes
	switch     surface=fine_gravel              fineGravelRes
	switch     surface=unpaved|dirt|earth|grass dirtRes
	switch     surface=sand                     sandRes
	switch     surface=mud                      mudRes
	#
	# best guess for unsure paving:
	switch highway=raceway					asphaltRes			# Rennstrecke
	switch highway=motorway|motorway_link	asphaltRes			# Autobahn und Auffahrten
	switch highway=trunk|trunk_link			asphaltRes			# Schnellstraßen (wie BAB) und Auffahrten
	switch highway=primary|primary_link		asphaltRes			# Bundesstraßen und Auffahrten
	switch highway=secondary|secondary_link	asphaltRes			# Landstraßen und Auffahrten
	switch highway=tertiary|tertiary_link	asphaltRes			# Kreisstraßen und Auffahrten
	switch highway=unclassified				asphaltRes			# Dorfstraßen	  
	switch highway=residential 				asphaltRes			# Wohnstraße
	switch highway=rest_area|services		asphaltRes			# Rastplatz
	switch highway=corridor					asphaltRes			# Hallway inside a building
	switch highway=crossing					asphaltRes			# Street crossing
	switch highway=bus_stop					asphaltRes			# Bus stop on the street
	switch highway=mini_roundabout			asphaltRes			# Mini roundabout in the street
	switch highway=turning_loop				asphaltRes			# Turning Loop
	switch highway=platform					pavingStonesRes		# Bushaltestelle (wo die Personen stehen)
	switch highway=living_street			pavingStonesRes		# Spielstraße
	switch highway=pedestrian				settRes				# Fußgängerzone
	switch highway=service					pavingStonesRes		# Zugangsstraßen
	switch highway=bridleway				compactedRes		# Reit- und Fußweg
	switch highway=cycleway					pavingStonesRes		# Radweg
	switch highway=footway  				groundRes			# Gehweg
	switch highway=unsurfaced				dirtRes				# street without surface
	switch highway=road						pavingUnsureRes	# unbekannter Typ
	#
	# for highway=track, check the tracktype
	switch and highway=track tracktype=grade1	asphaltRes								# Asphalt surface
	switch and highway=track tracktype=grade2	compactedRes							# mostly solid
	switch and highway=track tracktype=grade3	multiply 0.5 add compactedRes groundRes	# Even mixture of hard and soft materials.
	switch and highway=track tracktype=grade4	groundRes								# Mostly soft
	switch and highway=track tracktype=grade5	dirtRes									# soft
	#
	# for highway=path, check the tracktype	(sometimes a track is wrongly annotaded as a path and a tracktype is added)
	switch and highway=path tracktype=grade1	asphaltRes								# Asphalt surface
	switch and highway=path tracktype=grade2	compactedRes							# mostly solid
	switch and highway=path tracktype=grade3	multiply 0.5 add compactedRes groundRes	# Even mixture of hard and soft materials.
	switch and highway=path tracktype=grade4	groundRes								# Mostly soft
	switch and highway=path tracktype=grade5	dirtRes									# soft
	#
	# for a path or track without tracktype or an unknown highway, check mtb:scale property
	switch mtb:scale=0-	compactedRes										# Gravel or packed earth. No particular difficulties (very easy)
	switch mtb:scale=0	cobblestoneRes										# Gravel or packed earth. No particular difficulties
	switch mtb:scale=0+	groundRes											# Gravel or packed earth. No particular difficulties (harder one)
	switch mtb:scale=1-	multiply 0.5 add groundRes multiply 2.0 dirtRes		# roots and small stones. (easier)
	switch mtb:scale=1	multiply 2.0 dirtRes								# roots and small stones. --> smoothness=horrible
	switch mtb:scale=1+	add multiply 0.25 mudRes multiply 1.5 dirtRes		# roots and small stones. (harder, betwwen scale=1 and scale=2)
	switch mtb:scale=2	multiply 0.5 add mudRes multiply 2 dirtRes			# large rocks and stones. --> smoothness=mean(horrible & very_horrible)
	switch mtb:scale=3	mudRes												# large obstacles such as boulders and large roots. --> smoothness=very_horrible
	switch mtb:scale=4	multiply 1.5 mudRes									# large boulders, roots. --> smoothness=mean(very_horrible & impassable)
	switch mtb:scale=5	multiply 2.0 mudRes									# big boulder fields, debris, landslides.  --> smoothnes=impassable
	switch mtb:scale=6	multiply 2.5 mudRes									# more than impassable :-)
	#
	# Defaults for path & track
	switch and highway=path|track tracktype=	dirtRes						# unknown, but most likely soft
	#
	# Default if really unknown
											pavingUnsureRes


### Scale rolling resistance factor to bike tire

# surface normalization factor  of the bike:
#
# for a normal touring bike, this about 25% higher than the one of a car
# m = 100kg --> 50kg per wheel
# w = 37mm
# pt = 3.5bar
# => snfBike = 5.41 kg*bar/mm
# ==> snfBike/snfCar = 1.102
assign snfBike	multiply 0.5 multiply SystemWeight divide gTirePressure gTireWidth

# surface normalization factor of a car:
# 
# Golf V:
# m = 1600kg --> 400kg per wheel
# w = 205mm
# pt = 2.2bar
assign snfCar	4.292682927		# kg*bar/mm

# scale rolling resistance of the car to a rolling resistance for the current 
# bike
assign rollingResistanceFactor
	add 
		1
		multiply
			# scale resistance increase with normalization factor for used tire
			divide snfBike snfCar		# = 2.08 for the roadbike
			sub
				surfaceFactor
				1


# Walking & Carrying detection
#-------------------------------------------------------------------------------

# store needed bike category to ride on this way segment.
#	way category > bike category     --> Walking
#	way category > bike category + 1 --> Carrying
# 
# Category Description
# 1  - Roadbike     - no drops
# 2  - Gravel       - drop height <15cm
# 3  - MTB XC       - drop height <60cm
# 4  - MTB Enduro   - drop height <120cm
# 5  - MTB Downhill - drop height >120cm
# 9  - Carrying Passage for all bike categories

# For flat ways without any slope.
assign wayCategory
	# very clear tags superseeding all others in descending priority:
	switch wheelchair=yes					1
		
	# Take the maximum value calculated by any of the following keys
	max
		#
		# Smoothness
		# http://wiki.openstreetmap.org/wiki/Key:smoothness
		switch smoothness=excellent|very_good		1	# thin_rollers - roller blade, skate board
		switch smoothness=good		 				1	# thin_wheels - racing bike
		switch smoothness=intermediate				1	# wheels - city bike, wheel chair, sport cars
		switch smoothness=bad|robust_wheels			1	# robust wheels - trekking bike, normal cars
		switch smoothness=very_bad|high_clearance	2	# high clearance - normal cars with slightly higher clearance
		switch smoothness=horrible|off_road_wheels	3	# off road wheels - off road cars 
		switch smoothness=very_horrible				4	# specialized off road vehicles - ATV, tractor
		switch smoothness=impassable				9	# no wheeled vehicle - hiking path 
													0
	max
		# 
		# Highway Type
		switch highway=steps						3	# stairs
													0
	max
		# 
		# Surface
		# cycleway surface with high priority
		switch cycleway:surface=asphalt				1
		switch cycleway:surface=concrete|paved		1
		switch cycleway:surface=paving_stones		1
		switch cycleway:surface=compacted			1
		switch cycleway:surface=sett				1
		switch cycleway:surface=cobblestone			1
		switch cycleway:surface=gravel				2
		switch cycleway:surface=fine_gravel			1
		switch cycleway:surface=unpaved				2
		# Highway surface
		switch     surface=asphalt					1
		switch and surface=concrete concrete=lanes	1
		switch and surface=concrete concrete=plates	1
		switch     surface=concrete|paved 			1
		switch     surface=metal					1
		switch     surface=paving_stones			1
		switch     surface=compacted|clay			1
		switch     surface=wood						1
		switch     surface=sett						1
		switch     surface=pebblestone				1
		switch     surface=cobblestone				1
		switch     surface=grass_paver				1
		switch     surface=gravel					2
		switch     surface=ground					2
		switch     surface=fine_gravel				1
		switch     surface=unpaved|dirt|earth|grass	2
		switch     surface=sand						2
		switch     surface=mud						3
		# best guess for unsure surface
		switch highway=raceway						1	# Rennstrecke
		switch highway=motorway|motorway_link		1	# Autobahn und Auffahrten
		switch highway=trunk|trunk_link				1	# Schnellstraßen (wie BAB) und Auffahrten
		switch highway=primary|primary_link			1	# Bundesstraßen und Auffahrten
		switch highway=secondary|secondary_link		1	# Landstraßen und Auffahrten
		switch highway=tertiary|tertiary_link   	1	# Kreisstraßen und Auffahrten
		switch highway=unclassified					1	# Dorfstraßen
		switch highway=residential 					1	# Wohnstraße
		switch highway=rest_area|services			1	# Rastplatz
		switch highway=corridor						1	# Hallway inside a building
		switch highway=crossing						1	# Street crossing
		switch highway=bus_stop						1	# Bus stop on the street
		switch highway=mini_roundabout				1	# Mini roundabout in the street
		switch highway=turning_loop					1	# Turning Loop
		switch highway=platform						1	# Bushaltestelle (wo die Personen stehen)
		switch highway=living_street				1	# Spielstraße
		switch highway=pedestrian					1	# Fußgängerzone
		switch highway=service						1	# Zugangsstraßen
	#	switch highway=bridleway						# Reit- und Fußweg
	#	switch highway=cycleway							# Radweg
	#	switch highway=footway  						# Gehweg
		switch highway=unsurfaced					2	# street without surface
	#	switch highway=road								# unbekannter Typ
	#	switch highway=steps							# Treppen
		# for highway=track, check the tracktype
		switch and highway=track tracktype=grade1	1	# Asphalt surface
		switch and highway=track tracktype=grade2	1	# mostly solid
		switch and highway=track tracktype=grade3	1	# Even mixture of hard and soft materials.
		switch and highway=track tracktype=grade4	2	# Mostly soft
		switch and highway=track tracktype=grade5	2	# soft
		# for highway=path, check the tracktype	(sometimes a track is wrongly annotaded as a path and a tracktype is added)
		switch and highway=path tracktype=grade1	1	# Asphalt surface
		switch and highway=path tracktype=grade2	1	# mostly solid
		switch and highway=path tracktype=grade3	1	# Even mixture of hard and soft materials.
		switch and highway=path tracktype=grade4	2	# Mostly soft
		switch and highway=path tracktype=grade5	2	# soft
													0
	max
		#
		# MTB or hiking Scale
		# mtb:scale
		switch mtb:scale=0-							1	# Gravel or packed earth. No particular difficulties (very easy)
		switch mtb:scale=0							1	# Gravel or packed earth. No particular difficulties
		switch mtb:scale=0+							1	# Gravel or packed earth. No particular difficulties (harder one)
		switch mtb:scale=1-							2	# roots and small stones (easier)
		switch mtb:scale=1							2	# roots and small stones
		switch mtb:scale=1+							2	# roots and small stones (harder)
		switch mtb:scale=2							3	# large rocks and stones
		switch mtb:scale=3							3	# large obstacles such as boulders and large roots
		switch mtb:scale=4							4	# large boulders, roots
		switch mtb:scale=5							5	# big boulder fields, debris, landslides
		switch mtb:scale=6							5	#
		# SAC scale for hiking trails
	#	switch sac_scale=hiking						
		switch sac_scale=mountain_hiking			3
		switch sac_scale=demanding_mountain_hiking	4
		switch sac_scale=alpine_hiking				5
		switch sac_scale=demanding_alpine_hiking	9
		switch sac_scale=difficult_alpine_hiking	9
													0
	#max 2nd operator
		#
		# Some heuristics
		switch 
			and not bikeAccess 
			and highway=path 
				or not sac_scale=
				or route_hiking_iwn=yes
				or route_hiking_nwn=yes
				or route_hiking_rwn=yes
				or route_hiking_lwn=yes
				   route_hiking_=yes						9	# path without bike access and part of the hiking network
		switch and estimated_forest_class=5 highway=path	3	# path inside forests is most likely only for MTB
															0

# Category for Uphill ways
assign wayCategoryUphill
	# Only stuff which is different to the flat situation
	switch highway=steps						9
	switch mtb:scale=4							9	# large boulders, roots
	switch mtb:scale=5							9	# big boulder fields, debris, landslides
	switch mtb:scale=6							9	#
												wayCategory	# Use flat as default

# Category for Downhill ways
assign wayCategoryDownhill	wayCategory		# Use flat as default

# Walking flag
assign isWalking			or not bikeAccess or badOneWay greater wayCategory         gBikeCategory
assign isWalkingUphill		or not bikeAccess or badOneWay greater wayCategoryUphill   gBikeCategory
assign isWalkingDownhill	or not bikeAccess or badOneWay greater wayCategoryDownhill gBikeCategory

# Carrying Flag
assign isCarrying			greater wayCategory         add gBikeCategory 1
assign isCarryingUphill		greater wayCategoryUphill   add gBikeCategory 1
assign isCarryingDownhill	greater wayCategoryDownhill add gBikeCategory 1


# Rolling Resistance Cost
#-------------------------------------------------------------------------------
# Rolling resistance cost are scaled by the gTimeOptimalityFactor. Additionally
# scale with gCarryCostFactor or walkingcostfactor if carrying or walking since
# this is the efficiency factor for walking or carrying. If carrying is not 
# allowed but is needed, the cost are chosen to be very high.
assign rollingResistanceCost
	switch and not AllowCarrying isCarrying			9999
	multiply
		switch isCarrying	gCarryCostFactor	# Use carrrycostfactor if carrying
		switch isWalking	gPushCostFactor		# if otherwise walking, it has to be pushing
							1					# Default
		multiply rollingResistanceFactor sub 1 gTimeOptimalityFactor

assign rollingResistanceCostUphill
	switch and not AllowCarrying isCarryingUphill	9999
	multiply
		switch isCarryingUphill	gCarryCostFactor	# Use carrrycostfactor if carrying
		switch isWalkingUphill	gPushCostFactor		# if otherwise walking, it has to be pushing
								1					# Default
		multiply rollingResistanceFactor sub 1 gTimeOptimalityFactor

assign rollingResistanceCostDownhill
	switch and not AllowCarrying isCarryingDownhill	9999
	multiply
		switch isCarryingDownhill	gCarryCostFactor	# Use carrrycostfactor if carrying
		switch isWalkingDownhill	gPushCostFactor		# if otherwise walking, it has to be pushing
									1					# Default
		multiply rollingResistanceFactor sub 1 gTimeOptimalityFactor


# Speed Cost
#-------------------------------------------------------------------------------

# The maximum allowed speed is used for traffic cost calculation and for routing 
# in case of lower allowed speed than reachable speed on the bike

# km/h
assign maxSpeedBackward
	switch maxspeed:backward=10		 10
	switch maxspeed:backward=20		 20
	switch maxspeed:backward=30		 30
	switch maxspeed:backward=40		 40
	switch maxspeed:backward=50		 50
	switch maxspeed:backward=60		 60	
	switch maxspeed:backward=70		 70
	switch maxspeed:backward=80		 80
	switch maxspeed:backward=90		 90
	switch maxspeed:backward=100	100
	switch maxspeed:backward=110	110
	switch maxspeed:backward=120	120
	switch maxspeed:backward=130	130
	switch maxspeed:backward=urban	 50
	switch maxspeed:backward=rural	100
									999

# km/h	
assign maxSpeedForward
	switch maxspeed:forward=10		 10
	switch maxspeed:forward=20		 20
	switch maxspeed:forward=30		 30
	switch maxspeed:forward=40		 40
	switch maxspeed:forward=50		 50
	switch maxspeed:forward=60		 60	
	switch maxspeed:forward=70		 70
	switch maxspeed:forward=80		 80
	switch maxspeed:forward=90		 90
	switch maxspeed:forward=100		100
	switch maxspeed:forward=110		110
	switch maxspeed:forward=120		120
	switch maxspeed:forward=130		130
	switch maxspeed:forward=urban	 50
	switch maxspeed:forward=rural	100
									999

# Max speed allowed by regulations
# km/h
assign maxAllowedSpeed
	# Direction wise
	switch and not reversedirection=yes lesser maxSpeedForward  999		maxSpeedForward
	switch and     reversedirection=yes lesser maxSpeedBackward 999		maxSpeedBackward
	# Maxspeed Tag
	switch maxspeed=10							 10
	switch maxspeed=20							 20
	switch maxspeed=30							 30
	switch maxspeed=40							 40
	switch maxspeed=50							 50
	switch maxspeed=60							 60	
	switch maxspeed=70							 70
	switch maxspeed=80							 80
	switch maxspeed=90							 90
	switch maxspeed=100							100
	switch maxspeed=110							110
	switch maxspeed=120							120
	switch maxspeed=130							130
	switch maxspeed=urban						 50
	switch maxspeed=rural						100
	# Zone Tag
	switch zone:maxspeed=20						 20
	switch zone:maxspeed=30						 30
	# Way type
	switch highway=motorway|motorway_link		130 # Autobahn (BAB) und Auffahrten
	switch motorroad=yes						120 # Kraftfahrstraße (wie BAB)
	switch highway=trunk|trunk_link				120 # Schnellstraßen (wie BAB) und Auffahrten
	switch highway=primary|primary_link			100 # Bundesstraßen und Auffahrten
	switch highway=secondary|secondary_link 	100 # Landstraßen und Auffahrten
	switch highway=tertiary|tertiary_link		100 # Kreisstraßen und Auffahrten
	switch highway=unclassified					 50 # Dorfstraßen
	switch highway=residential					 30 # Wohnstraße
	switch highway=service						 30 # Zugangsstraßen
	switch highway=cycleway						 30 # Radweg
	switch highway=living_street				 10 # Spielstraße
	switch highway=pedestrian					 10 # Fußgängerzone
	switch and bicycle=designated
	       highway=bridleway|footway			 30 # Designated bike lanes/ways on footways
	switch highway=bridleway					 10 # Reit- und Fußweg
	switch highway=footway						 10 # Gehweg
	switch highway=path							100 # Pfad
	switch highway=track						100 # Feldweg
	switch highway=road							100 # unbekannter Typ
	switch highway=steps						  5 # Treppen
												100 # Default (unknown max speed)

# Max desired speed by the biker in km/h
# This speed might be lower than the maximum allowed speed (and thus the traffic
# speed)
# The absolute maximum speed "gMaxBikerSpeed" is scaled by the 
# rollingResistanceFactor to consider the slower desired speed at bad surfaces.
assign maxDesiredSpeed
	min	divide gMaxBikerSpeed rollingResistanceFactor
	max switch or hasCycleway anyCycleroute		30	0		# Cycleroutes and cycleways are assumed to be more bike friendly and allow at least 30km/h
	# some special ways
	# Now from fast to slow :-) 
	switch highway=track 							 40		# Feldweg
	switch and highway=path tracktype=grade1|grade2	 40		# Feldweg (Track which is not annotaded according to OSM standards)
	switch bicycle=designated						 30		# Max. Geschw. bei Fahrradwegen wird unabhaengig von der Art der Strasse zu 30km/h angenommen
	switch highway=cycleway							 30		# Radweg
	switch highway=unclassified						 30		# Dorfstraßen
	switch highway=residential 						 25		# Wohnstraße
	switch highway=service							 25		# Zugangsstraßen
	switch highway=path								 20		# Pfad
	switch highway=footway							 15		# Gehweg
	switch route=ferry								 10		# Fähren (Bodenseefähre Konstanz, 4.4km/25min = 10.5km/h)
	switch highway=steps							  2.5	# Treppen
													999		# Default

# Compute maximum biker speed:
# - the biker does never exceed the maximum desired speed for the given highway
# - the biker might exceed the maximum allowed speed by 10% or 5km/h
assign bikeSpeedLimit
	min 
		maxDesiredSpeed 
		max
			multiply 1.1 maxAllowedSpeed
			add      5.0 maxAllowedSpeed

# speed for uphills and downhills  with "SlopeMax"
# Here the additional current rolling resistance is included into the speed
# calculation
#
# Additionally make sure that bike speed is at least somewhat positive to avoid
# div by zero errors.
assign equivSlopeCr	multiply 100 multiply gCr sub rollingResistanceFactor 1	# Equivalent (virtual) slope due to rolling resistance difference to asphalt
assign speeddvdsm2	divide sub gSpeedm1 gSpeedm2 sub gSlopem1 gSlopem2	# Slope of speed over slope curve between -2*slopeStepSize and -1*slopeStepSize
assign speeddvdsm1	divide sub gSpeed0  gSpeedm1 sub gSlope0  gSlopem1	# Slope of speed over slope curve between -1*slopeStepSize and    0
assign speeddvdsp1	divide sub gSpeedp1 gSpeed0  sub gSlopep1 gSlope0	# Slope of speed over slope curve between    0             and    slopeStepSize
assign speeddvdsp2	divide sub gSpeedp2 gSpeedp1 sub gSlopep2 gSlopep1	# Slope of speed over slope curve between    slopeStepSize and  2*slopeStepSize
assign speeddvdsp3	divide sub gSpeedp3 gSpeedp2 sub gSlopep3 gSlopep2	# Slope of speed over slope curve between  2*slopeStepSize and  3*slopeStepSize

# new bike speed for -SlopeMax% slope
assign tmpSlope	add equivSlopeCr multiply -1 SlopeMax
assign bikeSpeedDownhill
	max 0.001
	min switch isCarryingDownhill	2.5	999		# Speed while carrying the bike
	min switch isWalkingDownhill	5	999		# Speed while pushing the bike
	switch lesser tmpSlope gSlopem1	# choose interpolation point
		add gSpeedm2 multiply speeddvdsm2 sub tmpSlope gSlopem2
	switch lesser tmpSlope gSlope0
		add gSpeedm1 multiply speeddvdsm1 sub tmpSlope gSlopem1
	switch lesser tmpSlope gSpeedp1
		add gSpeed0  multiply speeddvdsp1 sub tmpSlope gSlope0
	switch lesser tmpSlope gSlopep2
		add gSpeedp1 multiply speeddvdsp2 sub tmpSlope gSlopep1
		add gSpeedp2 multiply speeddvdsp3 sub tmpSlope gSlopep2

# New bike speed for 0% slope
assign tmpSlope	equivSlopeCr
assign bikeSpeed
	max 0.001
	min switch isCarrying			2.5	999		# Speed while carrying the bike
	min switch isWalking			5	999		# Speed while pushing the bike
	switch lesser tmpSlope gSlopep1		# choose interpolation point
		add gSpeed0  multiply speeddvdsp1 sub tmpSlope gSlope0
	switch lesser tmpSlope gSlopep2
		add gSpeedp1 multiply speeddvdsp2 sub tmpSlope gSlopep1
		add gSpeedp2 multiply speeddvdsp3 sub tmpSlope gSlopep2

# new bike speed for +SlopeMax% slope
assign tmpSlope	add equivSlopeCr SlopeMax
assign bikeSpeedUphill
	max 0.001
	min switch isCarryingUphill		2.5	999		# Speed while carrying the bike
	min switch isWalkingUphill		5	999		# Speed while pushing the bike
	switch greater tmpSlope gSlopep2	# choose interpolation point
		add gSpeedp2 multiply speeddvdsp3 sub tmpSlope gSlopep2
	switch greater tmpSlope gSlopep1
		add gSpeedp1 multiply speeddvdsp2 sub tmpSlope gSlopep1
		add gSpeed0  multiply speeddvdsp1 sub tmpSlope gSlope0


# Limit bike speed
#
# Compute slope at which the bikeSpeedLimit is reached. 
assign bikeSpeedLimitEquivalentSlope
	sub 
		switch greater bikeSpeedLimit gSpeedm1
			add gSlopem1 divide sub bikeSpeedLimit gSpeedm1 speeddvdsm2
		switch greater bikeSpeedLimit gSpeed0
			add gSlope0  divide sub bikeSpeedLimit gSpeed0  speeddvdsm1
		switch greater bikeSpeedLimit gSpeedp1
			add gSlopep1 divide sub bikeSpeedLimit gSpeedp1 speeddvdsp1
		switch greater bikeSpeedLimit gSpeedp2	
			add gSlopep2 divide sub bikeSpeedLimit gSpeedp2 speeddvdsp2
			add gSlopep3 divide sub bikeSpeedLimit gSpeedp3 speeddvdsp3
		equivSlopeCr	# substract equivalent slope for rollnig resistance	

# If the speed limit is hit at negative slope, the limitation can be represented
# perfectly by utilising the "downhillmaxslopecost" parameter. For uphills, the
# equivalent parameter "uphillmaxslopecost" is already used for max slope
# limitation. Thus, if the speed limitation is reached during uphill segments,
# the limitation cannot be represented as good as in downhill segments. 
assign limitedBikeSpeed			min bikeSpeedLimit bikeSpeed
assign limitedBikeSpeedUphill	min bikeSpeedLimit bikeSpeedUphill
assign limitedBikeSpeedDownhill	min bikeSpeedLimit bikeSpeedDownhill

assign speedCost			multiply gTimeOptimalityFactor divide gSpeed0 limitedBikeSpeed
assign speedCostUphill		multiply gTimeOptimalityFactor divide gSpeed0 limitedBikeSpeedUphill
assign speedCostDownhill	multiply gTimeOptimalityFactor divide gSpeed0 
	switch lesser bikeSpeedLimitEquivalentSlope 0
		bikeSpeedDownhill
		limitedBikeSpeedDownhill

# Speed limitation for negative slopes
# When exceeding "downhillmaxslope", "downhillmaxslopecost" is used instead of 
#"downhillcost". Most likely = elevationbufferreduce
assign downhillmaxslope
	switch and
		lesser bikeSpeedLimitEquivalentSlope 0
		greater bikeSpeedLimitEquivalentSlope multiply -1 elevationbufferreduce
	sub multiply -1 bikeSpeedLimitEquivalentSlope gSlopeCutoff		# True
	elevationbufferreduce											# False
	
assign dscdhm divide sub speedCost speedCostDownhill multiply 0.01 sub gSlope0 gSlopem2
assign DownhillMaxSlopeAdditionalCost
	switch and
		lesser bikeSpeedLimitEquivalentSlope 0
		greater bikeSpeedLimitEquivalentSlope multiply -1 elevationbufferreduce
	dscdhm
	0	
assign downhillmaxslopecost		add DownhillMaxSlopeAdditionalCost downhillcost
		

# Traffic Cost
#-------------------------------------------------------------------------------

# Get number of lanes for current highway
assign nLanes
	switch oneway=yes|true|1
		switch lanes=1	1
		switch lanes=2	2
		switch lanes=3	3
		switch lanes=4	4
		switch lanes=5	5
		switch lanes=6	6
		switch lanes=7	7
						1
	# else
		switch lanes=1	0.5
		switch lanes=2	1
		switch lanes=3	1.5
		switch lanes=4	2
		switch lanes=5	2.5
		switch lanes=6	3
		switch lanes=7	3.5
						1

# Traffic per highway type per hour according to DTV statistics 2020 Baden-Württemberg, Germany.
# 2020 - https://mobidata-bw.de/vm/Endergebnisse_Strassenverkehrszaehlung_BW/Ergebnisse_2020_Excel.zip
assign trafficPerHighway
	switch highway=trunk|trunk_link			# Schnellstraßen (wie BAB) und Auffahrten
		switch lesser nLanes 3		multiply 255.6 nLanes	# 24535/24/4 =~ 255.6
									multiply 571.5 nLanes	# 82296/24/6 =~ 571.5
	switch highway=primary|primary_link		# Bundesstraßen und Auffahrten
		switch lesser nLanes 1.5	multiply 232.4 nLanes	# 11153/24/2 =~ 232.4
		switch lesser nLanes 2		multiply 184.9 nLanes	# 13314/24/3 =~ 184.9
		switch lesser nLanes 3		multiply 296.3 nLanes	# 28440/24/4 =~ 296.3
									multiply 242.0 nLanes	# 34845/24/6 =~ 242.0
	switch highway=secondary|secondary_link	# Landstraßen und Auffahrtenc
		switch lesser nLanes 2		multiply 123.0 nLanes	#  5904/24/2 =~ 123.0
									multiply 207.8 nLanes	# 19949/24/4 =~ 207.8
	switch highway=tertiary|tertiary_link	# Kreisstraßen und Auffahrten
		switch lesser nLanes 1.5	multiply  53.4 nLanes	# 2562/24/2 =~ 53.4
		switch lesser nLanes 2		multiply  42.3 nLanes	# 3049/24/3 =~ 42.3
									multiply  88.8 nLanes	# 8527/24/4 =~ 88.8
	switch highway=unclassified		0		# Dorfstraßen	  
	switch highway=residential		0		# Wohnstraße
	switch highway=service			0		# Zugangsstraßen
	switch highway=living_street	0		# Spielstraße
	switch highway=pedestrian		0		# Fußgängerzone
	switch highway=bridleway		0		# Reit- und Fußweg
	switch highway=cycleway			0		# Radweg
	switch highway=footway			0		# Gehweg
	switch highway=path				0		# Pfad 
	switch highway=track 			0		# Feldweg
	switch highway=road				0		# unbekannter Typ
									0		# Default


# Different traffic classes
# Source for documentation of this pseudotag: https://forum.openstreetmap.org/viewtopic.php?id=31044
# Traffic per hour dependency with traffic class is only a feeling without any
# data proving this values
assign class2traffic	0.01	# vehicles per day / meter living street
assign trafficPerClass
	switch estimated_traffic_class=7	multiply 320000 class2traffic
	switch estimated_traffic_class=6	multiply 160000 class2traffic
	switch estimated_traffic_class=5	multiply  80000 class2traffic
	switch estimated_traffic_class=4	multiply  40000 class2traffic
	switch estimated_traffic_class=3	multiply  20000 class2traffic
	switch estimated_traffic_class=2	multiply  10000 class2traffic
	switch estimated_traffic_class=1	multiply   5000 class2traffic
										0

assign traffic divide add trafficPerClass multiply 2 trafficPerHighway 3

# actual speed of vehicles will be estimated by the minimum of the taged max 
# allowed speed and some estimations (for Germany)
assign vehicleSpeed
	min maxAllowedSpeed	
	switch highway=motorway|motorway_link   130	# Autobahn (BAB) und Auffahrten
	switch motorroad=yes					130	# Kraftfahrstraße (wie BAB)
	switch highway=trunk|trunk_link			120	# Schnellstraßen (wie BAB) und Auffahrten
	switch highway=primary|primary_link		100	# Bundesstraßen und Auffahrten
	switch highway=secondary|secondary_link	 90	# Landstraßen und Auffahrten
	switch highway=tertiary|tertiary_link	 80	# Kreisstraßen und Auffahrten
	switch highway=unclassified				 40	# Dorfstraßen	  
	switch highway=residential				 30	# Wohnstraße
	switch highway=service					 30	# Zugangsstraßen
	switch highway=living_street 			 10	# Spielstraße
											 90 # Default

# Compute overtaking vehicles per meter depending on bike speed
assign bikeSpeedForTraffic         max limitedBikeSpeed         1	# use at least 1km/h --> div by zero
assign bikeSpeedForTrafficUphill   max limitedBikeSpeedUphill   1
assign bikeSpeedForTrafficDownhill max limitedBikeSpeedDownhill 1
assign overtakingsPerHour          multiply traffic divide max 0 sub vehicleSpeed bikeSpeedForTraffic         vehicleSpeed
assign overtakingsPerHourUphill    multiply traffic divide max 0 sub vehicleSpeed bikeSpeedForTrafficUphill   vehicleSpeed
assign overtakingsPerHourDownhill  multiply traffic divide max 0 sub vehicleSpeed bikeSpeedForTrafficDownhill vehicleSpeed
assign overtakingsPerMeter         divide overtakingsPerHour         multiply 1000 bikeSpeedForTraffic
assign overtakingsPerMeterUphill   divide overtakingsPerHourUphill   multiply 1000 bikeSpeedForTrafficUphill
assign overtakingsPerMeterDownhill divide overtakingsPerHourDownhill multiply 1000 bikeSpeedForTrafficDownhill

# Treat traffic penalty differently for cycling lanes		
assign trafficVehicleCostScaled 
	multiply 0.925 multiply TrafficVehicleCost 	# Multiplication with 0.925 to get a better linear approximation of the trafficCost-over-slope curve
		switch hasCyclewayTrack	0.00
		switch hasCycleway 			0.5 
									1.0

# Compute traffic cost
assign trafficCost 			multiply overtakingsPerMeter         trafficVehicleCostScaled
assign trafficCostUphill 	multiply overtakingsPerMeterUphill   trafficVehicleCostScaled
assign trafficCostDownhill 	multiply overtakingsPerMeterDownhill trafficVehicleCostScaled


# Noise Cost
#-------------------------------------------------------------------------------
assign noiseFactor
	switch estimated_noise_class=6	0.90
	switch estimated_noise_class=5	0.675
	switch estimated_noise_class=4	0.475
	switch estimated_noise_class=3	0.3625
	switch estimated_noise_class=2	0.175
	switch estimated_noise_class=1	0.05
									0

assign noiseFactor divide noiseFactor 0.9		# normalize

assign weightedNoiseCost
	switch AvoidNoisyRoads
		multiply gNoiseCost noiseFactor
		0


# Green Cost
#-------------------------------------------------------------------------------
assign greenFactor
	switch estimated_forest_class=6	0.99
	switch estimated_forest_class=5	0.89
	switch estimated_forest_class=4	0.70
	switch estimated_forest_class=3	0.50
	switch estimated_forest_class=2	0.30
	switch estimated_forest_class=1	0.15
									0

assign greenFactor divide greenFactor 0.99		# normalize

assign weightedGreenCost
	switch PreferGreen
		multiply gGreenCost greenFactor
		0


# Water Cost
#-------------------------------------------------------------------------------
assign waterFactor
	switch estimated_river_class=6	0.95
	switch estimated_river_class=5	0.85
	switch estimated_river_class=4	0.65
	switch estimated_river_class=3	0.40
	switch estimated_river_class=2	0.20
	switch estimated_river_class=1	0.05
									0

assign waterFactor divide waterFactor 0.95		# normalize

assign weightedWaterCost
	switch PreferWater
		multiply gWaterCost waterFactor
		0


# Highway Type Cost
#-------------------------------------------------------------------------------

# here only costs not handled by the other parts are applied
# 128 Mio tags,  (11-2018) - https://taginfo.openstreetmap.org/keys/smoothness#values
assign highwayCost
	# disallow non existing highways, motorways and motorroads
	switch and highway= not route=ferry  				10000	# exclude rivers, rails etc.
	switch    highway=proposed|abandoned|construction   10000	# construction sites 
	
	#
	# all other exclusions below (access, steps, ferries,..)
	# should not be deleted by the decoder, to be available
	# in voice-hint-processing (if cost are >=10000, the decoder will delete them)
	switch and not AllowFerries route=ferry				 9999
	
	# Exceptions which shal not be penalized
	switch hasCycleway							0
	switch bicycle_road=yes						0		# Fahrradrstraßen
	switch railway=abandoned					0		# Abandoned railways are quite a good bicycle route :-) 

	# highway cost
	switch     highway=motorway|motorway_link	 9999		# Autobahn (BAB) und Auffahrten
	switch     motorroad=yes					 9999		# Kraftfahrstraße (wie BAB)
	switch     highway=trunk|trunk_link      	   10		# Schnellstraßen (wie BAB) und Auffahrten
	switch     highway=primary|primary_link     	0.0		# Bundesstraßen und Auffahrten
	switch     highway=secondary|secondary_link 	0.0		# Landstraßen und Auffahrten
	switch     highway=tertiary|tertiary_link   	0.0 	# Kreisstraßen und Auffahrten
	switch     highway=unclassified       			0.0		# Kommunalstraßen
	switch     highway=residential 					0.1		# Wohnstraße		(mehr Kreuzungen)
	switch     highway=service                  	0.1 	# Zugangsstraßen	(mehr Kreuzungen)
	switch     highway=living_street 				0.1		# Spielstraße		(mehr Kreuzungen)
	switch     highway=pedestrian   				0.0		# Fußgängerzone
	switch     highway=bridleway                	0.0		# Reit- und Fußweg
	switch     highway=cycleway                 	0.0		# Radweg
	switch     highway=footway  					0.0		# Gehweg
	switch     highway=track 						0.0		# Feldweg
	switch and highway=path tracktype=grade1|grade2	0.0		# Path which is a track but is wrongly annotaded
	switch and highway=path bicycle=designated		0.0		# Path which is a designated bicycle track
	switch and highway=path anyCycleroute			0.0		# Path which as part of an official cycle route
	switch     highway=path  						0.2 	# Pfad 
	switch     highway=road							0.0		# unbekannter Typ
	switch     highway=steps                        0.0		# Treppen
	switch     route=ferry                      	0.0 	# Fähren
													0.0		# Default


# Access Costs
#-------------------------------------------------------------------------------

# Check for access. With penalty 100000, the segment is ignored and not used
assign accessPenalty
	if      bikeAccess then 0
	else if footAccess then 0
	else                    100000


# Miscellaneous costs
#-------------------------------------------------------------------------------

#
# handle one-ways. On primary roads, wrong-oneways should be close to forbidden.
# On all other ways, it is assumed, that the bike is pushed on a bad oneway.
#
assign oneWayCost
	add
 		if ( badOneWay ) then
		(
			if      ( junction=roundabout|circular     ) then 60
			else if ( highway=primary|primary_link     ) then 50
			else if ( highway=secondary|secondary_link ) then 30
			else if ( highway=tertiary|tertiary_link   ) then 20
			else 											   0
		)
		else 0.0
		# for one-ways which are allowed to be accessed in "wrong"
		# direction by bike, add a small penalty to reduce usage of them
		switch and and reversedirection=yes oneway=yes|true|1 oneway:bicycle=no	0.1	0
	
# prefer cycleroutes
assign cycleRouteFavor 
	switch and StickToCycleRoute anyCycleroute		gCycleRouteCost	0


# Final calculation of costs
################################################################################

# Costfactor
#-------------------------------------------------------------------------------
# calculate the cost-factor, which is the factor by which the distance of a 
# way-segment is multiplied to calculate the cost of that segment. The 
# costfactor should be >=1 and it's supposed to be close to 1 for the type of
# way the routing profile is searching for

# common cost independently of slope
assign commonCostFactor
	#
	# exceptions with sub-cost below 10000 (motorway, bad one-way, ...)  should
	# not be deleted by the decoder, to be available in voice-hint-processing
	# (if cost are >=10000, the decoder will delete them)
	switch greater max accessPenalty highwayCost 9999	10000
	min 9999										# make sure that costfactor is less or equal 9999
	add accessPenalty								# access penalty
	add highwayCost									# cost for different types of highway
	add	oneWayCost									# cost for cycling against oneways for cars only
	add cycleRouteFavor								# (negative) cost for cycleroutes
	add weightedNoiseCost							# Cost for noisy roads
	add weightedGreenCost							# Cost (or better incentive) for green ways
		weightedWaterCost							# Cost (or better incentive) for ways next to rivers
	

# for flat terrain
assign costfactor
	switch greater commonCostFactor 9999	10000	# If forbidden --> 10000, else the following
	min 9999										# make sure that costfactor is less or equal 9999
	add commonCostFactor							# common cost independently of slope
	add rollingResistanceCost						# Cost for surface / rolling resistance
	add speedCost									# speed cost
		trafficCost									# traffic cost
	
# for uphill terrain
assign uphillcostfactor
	switch greater commonCostFactor 9999	10000	# If forbidden --> 10000, else the following
	min 9999										# make sure that costfactor is less or equal 9999
	add commonCostFactor							# common cost independently of slope
	add rollingResistanceCostUphill					# Cost for surface / rolling resistance
	add speedCostUphill								# speed cost
		trafficCostUphill							# traffic cost
		
# for downhill terrain		
assign downhillcostfactor
	switch greater commonCostFactor 9999	10000	# If forbidden --> 10000, else the following
	min 9999										# make sure that costfactor is less or equal 9999
	add commonCostFactor							# common cost independently of slope
	add rollingResistanceCostDownhill				# Cost for surface / rolling resistance
	add speedCostDownhill							# speed cost
		trafficCostDownhill							# traffic cost


# Initial Costs 
#-------------------------------------------------------------------------------

#
# for any change in initialclassifier, initialcost is added once
#
assign initialclassifier
     if      route=ferry then gClassifierFerry
     # it is not possible to refer to the uphill or downhill situation, thus 
     # only the "isWalking" for flats is used
     else if isWalking   then gClassifierWalking
	 else	gClassifierNone 				  
#
# calculate the initial cost
# this is added to the total cost each time the initialclassifier changes
#
assign initialcost
	switch ( equal initialclassifier gClassifierFerry   )	gInitialFerryCost
	switch ( equal initialclassifier gClassifierWalking )	gInitialPushCost
															0	   


# Turn Costs
#-------------------------------------------------------------------------------

# this is the cost (in Meter) for a 90-degree turn
# The actual cost is calculated as turncost*cos(angle)
assign turncost = if junction=roundabout then 0
                  else gSpeed0Cost


# Voice hint generation stuff
#-------------------------------------------------------------------------------

# way priorities used for voice hint generation
assign priorityclassifier
	switch highway=motorway						30
	switch highway=motorway_link				29
	switch highway=trunk						28
	switch highway=trunk_link					27
	switch highway=primary						26
	switch highway=primary_link					25
	switch highway=secondary					24
	switch highway=secondary_link				23
	switch highway=tertiary						22
	switch highway=tertiary_link				21
	switch highway=unclassified					20
	switch highway=residential|living_street	6
	switch highway=service						6
	switch highway=cycleway						6
	switch bicycle=designated					6
	switch highway=track
		switch tracktype=grade1					6
												4
	switch highway=bridleway|road|path|footway	4
	switch highway=steps						2
	switch highway=pedestrian					2
												0

# some more classifying bits used for voice hint generation...
assign isbadoneway		badOneWay
assign isgoodoneway		if reversedirection=yes then oneway=-1
						else if oneway= then junction=roundabout else oneway=yes|true|1
assign isroundabout		junction=roundabout
assign islinktype		highway=motorway_link|trunk_link|primary_link|secondary_link|tertiary_link
assign isgoodforcars	if greater priorityclassifier 6 then true
						else if highway=residential|living_street|service then true
						else if ( and highway=track tracktype=grade1 ) then true
						else false


# Save some information for node context
#-------------------------------------------------------------------------------
assign iswayreverse	reversedirection=yes


---context:node
#===============================================================================

# Logic Values / Access
#-------------------------------------------------------------------------------
assign defaultAccess
       switch access=
              1 # add default barrier restrictions here!
              switch or access=private access=no
                     0
                     1

assign bikeAccess
       or nodeaccessgranted=yes
          switch bicycle=
                 switch vehicle=
                        defaultAccess
                        switch or vehicle=private vehicle=no
                               0
                               1
                 switch or bicycle=private or bicycle=no bicycle=dismount
                        0
                        1

assign footAccess
       or bicycle=dismount
          switch foot=
                 defaultAccess
                 switch or foot=private foot=no
                        0
                        1


# Access Cost
#-------------------------------------------------------------------------------
assign initialcost
  switch bikeAccess
    0 				# legal --> no cost
    switch footAccess
      0				# legal, mount and dismount cost is done in way context
      1000000		# illegal to use
      

# Traffic Light Cost
#-------------------------------------------------------------------------------
assign trafficLightCost
	switch highway=traffic_signals
		switch traffic_signals:direction=both			gTrafficSignalCost
		switch traffic_signals:direction=forward
			switch not way:iswayreverse					gTrafficSignalCost 0
		switch traffic_signals:direction=backward
			switch way:iswayreverse						gTrafficSignalCost 0
		divide gTrafficSignalCost 2
	0


# Traffic Calming Cost
#-------------------------------------------------------------------------------
assign trafficCalmingCost
	switch traffic_calming=bump				gSpeed10Cost
	switch traffic_calming=dip				gSpeed10Cost
	switch traffic_calming=hump				gSpeed20Cost
	switch traffic_calming=table			gSpeed20Cost
	switch traffic_calming=rumble_strip		gSpeed20Cost
											0

# Barrier Cost
#-------------------------------------------------------------------------------
# Only apply initial pushcost for node if the biker is not already walking
assign pushCost	switch way:isWalking	0	gInitialPushCost

assign barrierCost
	#
	# Cost even while walking:
	
	# Bike and biker need to be lifted over the gate
	switch barrier=stile			add pushCost multiply gHeight2Length 1
	# Bike needs to be lifted over the gate. Since the bike has to be lifted 
	# quite high, same energy is assumed as for "stile" barrier
	switch barrier=kissing_gate		add pushCost multiply gHeight2Length 1
	# Bike needs to be lifted over the gate. Since the bike has to be lifted 
	# quite high, same energy is assumed as for "stile" barrier	
	switch barrier=turnstile		add pushCost multiply gHeight2Length 1
	# Energy and time for opening and closing the gate is assumed to be the same
	#  as for twice Dismount and Mount back again
	switch barrier=hampshire_gate	add pushCost multiply 2 gInitialPushCost
	
	#
	# No costs while walking:
	switch way:isWalking			0
	switch barrier=gate				pushCost
	switch barrier=bollard			0
	switch barrier=lift_gate		gSpeed0Cost
	switch barrier=cycle_barrier	gSpeed5Cost
	switch barrier=entrance			0
	switch barrier=block			0
	switch barrier=cattle_grid		gSpeed5Cost
	switch barrier=sally_port		0
	switch barrier=chain			gSpeed5Cost
	switch barrier=door				pushCost
	switch barrier=swing_gate		gSpeed5Cost
	switch barrier=bump_gate		pushCost
									0

# Final Cost Calculation
#-------------------------------------------------------------------------------
assign initialcost 
	add initialcost
	add	trafficLightCost
	add trafficCalmingCost
		barrierCost

