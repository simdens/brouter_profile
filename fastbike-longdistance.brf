################################################################################
# A BRouter profile suited for a road bike long distance travels               #
# Avoids bad surfaces, hills and high traffic                                  #
################################################################################

# Some of the profile is inspired by:
# - default profiles of brouter  
#   https://github.com/abrensch/brouter
# - trekking profile by poutnikl
#   https://github.com/poutnikl/Brouter-profiles

################################################################################
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! #
# !!           the forked version of brouter by simdens is needed           !! #
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! #
################################################################################

# ToDo
# - add Selector for different tires
# - add selector for different bikes

################################################################################
---context:global ##############################################################
################################################################################
# following code refers to global config

# Routing Parameters
################################################################################

# For UI 
#-------------------------------------------------------------------------------
assign SystemWeight				100		# %SystemWeight%				| kg - weight of system (bike+cyclist+luggage) | number
assign NominalPower				165		# %NominalPower%				| W - continuous available power of cyclist | number

# elevation cost parameters
assign SlopeMax					8.0		# %SlopeMax% 					| % - maximum allowed slope (up & downhill, soft limit) | number
 
# additional cost for different kind of transportation
assign StickToCycleRoute		true	# %StickToCycleRoute%			| cycle routes will be preferred | boolean
assign PreferGreen				true	# %PreferGreen%					| routes will prefer green environments | boolean
assign PreferWater				true	# %PreferWater%					| routes next to water or waterways are prefered | boolean
assign AvoidNoisyRoads			true	# %AvoidNoisyRoads%				| | boolean
assign AllowSteps				true	# %AllowSteps%					| | boolean
assign AllowFerries				false	# %AllowFerries%				| | boolean

# traffic cost
assign TrafficVehicleCost		70		# %TrafficVehicleCost%			| m - Cost per overtaking vehicle | number

# time optimallity parameter
assign TimeOptimalityPercentage	50		# %TimeOptimalityPercentage%	| % - Percentage to consider travel time. 0% - energy optimized, 100% - time optimized | number

# Turn instruction settings
# (Removed "%" such that they do not show up in the UI but might be easily 
# added again)
assign turnInstructionMode			1		# turnInstructionMode				| Mode for the generated turn instructions | [0=none, 1=auto-choose, 2=locus-style, 3=osmand-style, 4=comment-style, 5=gpsies-style, 6=orux-style, 7=locus-old-style]
assign turnInstructionCatchingRange	40		# turnInstructionCatchingRange		| m - Within this distance several turning instructions are combined into one and the turning angles are better approximated to the general direction | number
assign turnInstructionRoundabouts	true	# turnInstructionRoundabouts		| Set false to avoid generating special turning instructions for roundabouts | boolean
assign considerTurnRestrictions		true	# considerTurnRestrictions			| Set true to take turn restrictions into account | boolean


# General routing parameters 
#-------------------------------------------------------------------------------

# for debug
assign	processUnusedTags			true	# Set true to output unused tags in data tab

# way cost constants
assign noiseCost		 0.20	# Cost factor for noisy roads. Equivalent cost for having a way immediately next to a motorway
assign greenCost		-0.10	# Cost or incentive factor for green roads. Equivalent cost for a way through a forest or garden
assign waterCost		-0.10	# Cost or incentive factor for roads next to water. Equivalent cost for having a way immediately next to a waterway
assign cycleRouteCost	-0.10	# Cost or incentive for cycle routs

# elevation parameter constants
assign considerElevation				true	# elevation will be considered
assign downhillMaxSlopeAdditionalCost	  50	# additional cost per vertical meter for slope larger than "slopemax"
assign uphillMaxSlopeAdditionalCost		 100	# additional cost per vertical meter for slope larger than "slopemax"
assign slopeCutoff						   0.5	# slope is ignored if smaller than this threshold
assign elevationpenaltybuffer			   4
assign elevationmaxbuffer				   8

# Kinematic model parameters for Speed calculation
assign maxBikerSpeed	70
assign CwA				 0.6005			# drag coefficient times the reference area in m^2 -- http://www.kreuzotter.de/deutsch/speed.htm
assign Cr				 0.0029			# rolling resistance coefficient (dimensionless) -- http://www.kreuzotter.de/deutsch/speed.htm
assign Cv				 0.1			# viscouse damping coefficient (dimensionless) -- http://www.kreuzotter.de/deutsch/speedfaq.htm
assign rho				 1.16038		# Air density in kg/m³ @ 20°C & 300m above sea level  -- http://www.kreuzotter.de/deutsch/speedfaq.htm
assign n				 0.98			# Efficiency factor of the power transmission of the bike 
assign g				 9.81			# Gravity coefficient in N/kg
assign m				SystemWeight	# shorter Name
assign P				NominalPower	# shorter Name

# brouter search algorithm
assign pass1coefficient		1.5
assign pass2coefficient		0


# Constants 
#-------------------------------------------------------------------------------

# set that this is a bike profile
assign validForBikes       	1

# classifier constants
assign classifierNone     	1
assign classifierWalking  	2
assign classifierFerry    	3


# Compute remaining constants
################################################################################

# Kinematic model parameters for Brouter travel time calculation
assign maxSpeed   min maxBikerSpeed 45	# absolute maximum speed in km/h for travel time computation
assign S_C_x      multiply CwA rho		# drag coefficient times the reference area times the air density for travel time computation
assign C_r        multiply 1.5 Cr		# rolling resistance coefficient (dimensionless) for travel time computation -- 1.5x asphalt resistance 
assign bikerPower P
assign totalMass  m 

# Time optimality factor 0 to 1
assign timeOptimalityFactor min 1 max 0 div TimeOptimalityPercentage 100

# Speed Parameter Calculation:
#-------------------------------------------------------------------------------
# compute biker speed for different slopes
# Source for equations: http://www.kreuzotter.de/deutsch/speed.htm
#
# Surface Angle:
# 	beta = atan(slope/100)
# with:
# 	slope - Slope of surface in % 
#
# Can be linearized for |slope| <= 17% as
# 	beta = slope/100
# with an linearization error of less than 1% 
# 
#
# Rolling Resistance:
# 	Fr = g * m * Cr * cos(beta)
# with:
# 	g    - Gravity
# 	m    - mass of bike & rider
# 	Cr   - rolling resistance coefficiont
# 	beta - surface angle
# 
# Can be linearized for |beta| <= 8° or |slope| <= 14%
# 	Fr = g * m * Cr 
# with an linearization error of less than 1%. 
#
#
# Gravity Force:
# 	Fg = g * m * sin(beta)
# with:
# 	g    - Gravity
# 	m    - mass of bike & rider
# 	beta - surface angle
# 
# Can be linearized for |slope| <= 14%
# 	Fg = g * m * slope/100
# with an linearization error of less than 1%. 
#
#
# Air Resistance
# 	Fa = 0.5 * rho * A * cw * v^2
# with:
# 	rho - air density (kg/m^3)
# 	A   - cross sectional area
# 	cw  - drag coefficient
# 	v   - speed
#
# Can be simplified as 
# 	Fa = 0.5 * rho * Ae * v^2
# with:
# 	rho - air density (kg/m^3)
# 	Ae  - effective cross sectional area (A*cw)
# 	v   - speed
# 
#
# Viscos Damping
# There might be an additional viscos damping (proportianal to the speed) which
# is estimated with an coefficient of Cv = 0.1
# 	Fv = Cv * v
#
# All together:
# 	P * n = v * ( Fr + Fg + Fv(v) + Fa(v^2) ) 
# with:
# 	n - efficiency of the mechanical power transmission
# Computing the speed v can be done by using Newtons method for root finding:
# 	0 = v * ( Fr + Fg + Fv(v) + Fa(v^2) ) - P * n
#
#
# Typical Diagram for Speed over Slope:
# Ae = 0,6005m^2
# P  = 165W
# Cr = 0,0029
# m  = 100kg
#
#                                         ^                                     
# *.                                   62 | km/h                                
#---`*_-----------------------------------|-------------------------------------
#      `.                              58 | km/h                                
#        `*.                              |                                     
#           `*_                        54 | km/h                                
#              `.                         |                                     
#                `*.                   50 | km/h                                
#                   `.                    |                                     
#                     *.               46 | km/h                                
#                       `*_               |                                     
#                          `.          42 | km/h                                
#----------------------------`_-----------|-------------------------------------
#                              `.      38 | km/h                                
#                                `_       |                                     
#                                  `.  34 | km/h                                
#                                    `_   |                                     
#                                      `. | km/h                                
#                                        .|                                     
#                                      26 *.                                    
#                                         | *                                   
#                                      22 |  `*                                 
#-----------------------------------------|----`.-------------------------------
#                                      18 | km/h `*.                            
#                                         |         `*_                         
#                                      14 | km/h       `.                       
#                                         |              `*.                    
#                                      10 | km/h            ``*..._             
#                                         |                        ```*..._     
#                                       6 | km/h                           ```- 
#                                         |                                     
#                                       2 | km/h                                
#-+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+>
#-10%-9% -8% -7% -6% -5% -4% -3% -2% -1%  0%  1%  2%  3%  4%  5%  6%  7%  8%  9%
#                                       Slope                                   
# 
# 
# Strategy for changing rolling resistances:
# Strategy is to see an increased rolling resistance as an increased slope. This
# is possible since (linearized)
# 			Fr	=	Fg
# 	g * m * Cr	=	g * m * slope/100
# with
# 	slope = Cr*100
#
# For linear slope dependency, the interpolation points will be computed with
# the linearized downhill function


# Computing the biker speed at -8%, 0%, +2% and +8% slope with newtons method
# 	0 != - P * n
#	     + v   * g * m * ( Cr + slope/100)
#	     + v^2 * Cv
#	     + v^3 * 0.5 * rho * CwA

assign slope		-8		# Speedm8
assign v			20		# start value in m/s for root finding 
# Constants
assign mPn			multiply -1   multiply P n
assign gmCrSl		multiply  g   multiply m add Cr div slope 100
assign hrhoCwA		multiply  0.5 multiply rho CwA
# Iteration 1
assign value		add mPn	add multiply v gmCrSl	add multiply v multiply v Cv	multiply v multiply v multiply v hrhoCwA
assign derivative	       	add            gmCrSl	add multiply 2 multiply v Cv	multiply 3 multiply v multiply v hrhoCwA
assign v			sub v div value derivative
# Iteration 2
assign value		add mPn	add multiply v gmCrSl	add multiply v multiply v Cv	multiply v multiply v multiply v hrhoCwA
assign derivative	       	add            gmCrSl	add multiply 2 multiply v Cv	multiply 3 multiply v multiply v hrhoCwA
assign v			sub v div value derivative
# Iteration 3
assign value		add mPn	add multiply v gmCrSl	add multiply v multiply v Cv	multiply v multiply v multiply v hrhoCwA
assign derivative	       	add            gmCrSl	add multiply 2 multiply v Cv	multiply 3 multiply v multiply v hrhoCwA
assign v			sub v div value derivative
# Iteration 4
assign value		add mPn	add multiply v gmCrSl	add multiply v multiply v Cv	multiply v multiply v multiply v hrhoCwA
assign derivative	       	add            gmCrSl	add multiply 2 multiply v Cv	multiply 3 multiply v multiply v hrhoCwA
assign v			sub v div value derivative
# Iteration 5
assign value		add mPn	add multiply v gmCrSl	add multiply v multiply v Cv	multiply v multiply v multiply v hrhoCwA
assign derivative	       	add            gmCrSl	add multiply 2 multiply v Cv	multiply 3 multiply v multiply v hrhoCwA
assign v			sub v div value derivative
# Result
assign Speedm8 multiply v 3.6

assign slope		 0			# Speed0
# start value for v is the result of the previous computation
# Constants
assign mPn			multiply -1   multiply P n
assign gmCrSl		multiply  g   multiply m add Cr div slope 100
assign hrhoCwA		multiply  0.5 multiply rho CwA
# Iteration 1
assign value		add mPn	add multiply v gmCrSl	add multiply v multiply v Cv	multiply v multiply v multiply v hrhoCwA
assign derivative	       	add            gmCrSl	add multiply 2 multiply v Cv	multiply 3 multiply v multiply v hrhoCwA
assign v			sub v div value derivative
# Iteration 2
assign value		add mPn	add multiply v gmCrSl	add multiply v multiply v Cv	multiply v multiply v multiply v hrhoCwA
assign derivative	       	add            gmCrSl	add multiply 2 multiply v Cv	multiply 3 multiply v multiply v hrhoCwA
assign v			sub v div value derivative
# Iteration 3
assign value		add mPn	add multiply v gmCrSl	add multiply v multiply v Cv	multiply v multiply v multiply v hrhoCwA
assign derivative	       	add            gmCrSl	add multiply 2 multiply v Cv	multiply 3 multiply v multiply v hrhoCwA
assign v			sub v div value derivative
# Iteration 4
assign value		add mPn	add multiply v gmCrSl	add multiply v multiply v Cv	multiply v multiply v multiply v hrhoCwA
assign derivative	       	add            gmCrSl	add multiply 2 multiply v Cv	multiply 3 multiply v multiply v hrhoCwA
assign v			sub v div value derivative
# Iteration 5
assign value		add mPn	add multiply v gmCrSl	add multiply v multiply v Cv	multiply v multiply v multiply v hrhoCwA
assign derivative	       	add            gmCrSl	add multiply 2 multiply v Cv	multiply 3 multiply v multiply v hrhoCwA
assign v			sub v div value derivative
# Result
assign Speed0 multiply v 3.6

assign slope		 2			# Speedp2
# start value for v is the result of the previous computation
# Constants
assign mPn			multiply -1   multiply P n
assign gmCrSl		multiply  g   multiply m add Cr div slope 100
assign hrhoCwA		multiply  0.5 multiply rho CwA
# Iteration 1
assign value		add mPn	add multiply v gmCrSl	add multiply v multiply v Cv	multiply v multiply v multiply v hrhoCwA
assign derivative	       	add            gmCrSl	add multiply 2 multiply v Cv	multiply 3 multiply v multiply v hrhoCwA
assign v			sub v div value derivative
# Iteration 2
assign value		add mPn	add multiply v gmCrSl	add multiply v multiply v Cv	multiply v multiply v multiply v hrhoCwA
assign derivative	       	add            gmCrSl	add multiply 2 multiply v Cv	multiply 3 multiply v multiply v hrhoCwA
assign v			sub v div value derivative
# Iteration 3
assign value		add mPn	add multiply v gmCrSl	add multiply v multiply v Cv	multiply v multiply v multiply v hrhoCwA
assign derivative	       	add            gmCrSl	add multiply 2 multiply v Cv	multiply 3 multiply v multiply v hrhoCwA
assign v			sub v div value derivative
# Iteration 4
assign value		add mPn	add multiply v gmCrSl	add multiply v multiply v Cv	multiply v multiply v multiply v hrhoCwA
assign derivative	       	add            gmCrSl	add multiply 2 multiply v Cv	multiply 3 multiply v multiply v hrhoCwA
assign v			sub v div value derivative
# Iteration 5
assign value		add mPn	add multiply v gmCrSl	add multiply v multiply v Cv	multiply v multiply v multiply v hrhoCwA
assign derivative	       	add            gmCrSl	add multiply 2 multiply v Cv	multiply 3 multiply v multiply v hrhoCwA
assign v			sub v div value derivative
# Result
assign Speedp2 multiply v 3.6

assign slope		 8			# Speedp8
# start value for v is the result of the previous computation
# Constants
assign mPn			multiply -1   multiply P n
assign gmCrSl		multiply  g   multiply m add Cr div slope 100
assign hrhoCwA		multiply  0.5 multiply rho CwA
# Iteration 1
assign value		add mPn	add multiply v gmCrSl	add multiply v multiply v Cv	multiply v multiply v multiply v hrhoCwA
assign derivative	       	add            gmCrSl	add multiply 2 multiply v Cv	multiply 3 multiply v multiply v hrhoCwA
assign v			sub v div value derivative
# Iteration 2
assign value		add mPn	add multiply v gmCrSl	add multiply v multiply v Cv	multiply v multiply v multiply v hrhoCwA
assign derivative	       	add            gmCrSl	add multiply 2 multiply v Cv	multiply 3 multiply v multiply v hrhoCwA
assign v			sub v div value derivative
# Iteration 3
assign value		add mPn	add multiply v gmCrSl	add multiply v multiply v Cv	multiply v multiply v multiply v hrhoCwA
assign derivative	       	add            gmCrSl	add multiply 2 multiply v Cv	multiply 3 multiply v multiply v hrhoCwA
assign v			sub v div value derivative
# Iteration 4
assign value		add mPn	add multiply v gmCrSl	add multiply v multiply v Cv	multiply v multiply v multiply v hrhoCwA
assign derivative	       	add            gmCrSl	add multiply 2 multiply v Cv	multiply 3 multiply v multiply v hrhoCwA
assign v			sub v div value derivative
# Iteration 5
assign value		add mPn	add multiply v gmCrSl	add multiply v multiply v Cv	multiply v multiply v multiply v hrhoCwA
assign derivative	       	add            gmCrSl	add multiply 2 multiply v Cv	multiply 3 multiply v multiply v hrhoCwA
assign v			sub v div value derivative
# Result
assign Speedp8 multiply v 3.6


# Elevation Parameter Calculation
#-------------------------------------------------------------------------------

# compute equivalent length for one meter height
							#	mass * gravity / power * speed 
							#   <-------------------->
							#      height meters / s 
assign height2Length		multiply div multiply m g P div Speed0 3.6

# the parameters are renamed in this profile to ease the use of the profile
# For timeoptimality, uphill cost are included in speed cost
assign uphillcost				# cost per vertical meter
	switch considerElevation	
		multiply sub 1 timeOptimalityFactor height2Length
		0
assign downhillcost				# cost per vertical meter
	switch considerElevation
		multiply sub 1 timeOptimalityFactor 0
		0
assign elevationbufferreduce	sub SlopeMax slopeCutoff
assign downhillcutoff			slopeCutoff
assign uphillcutoff				slopeCutoff
assign downhillmaxbuffercost	add downhillMaxSlopeAdditionalCost downhillcost
assign uphillmaxbuffercost		add uphillMaxSlopeAdditionalCost   uphillcost


# Constants depending on speed or elevation constants
#-------------------------------------------------------------------------------

# Costs to decelerate to lower speed and accelerate back again to cruising speed
#
# For energy optimized routes, the costs are the way which can be traveled with 
# the kinetic energy of the biker and the bike at cruising speed on flat
# terrain. For time optimized routes, the cost is the way difference for 
# deceleration and accelerating afterwards compared to continuous cruising 
# speed. At least @ 26.3km/h, 165W, 100kg and 0% slope, this is roughly half of 
# the cost of the energy optimized cost. 
assign v				div Speed0	3.6		# Speed on flat terrain in m/s
assign v5				div 5		3.6		#  5km/h in m/s
assign v10				div 10		3.6		# 10km/h in m/s
assign v15				div 15		3.6		# 15km/h in m/s
assign v20				div 20		3.6		# 20km/h in m/s
assign kineticEnergy	multiply 0.5 multiply m multiply   v   v
assign kineticEnergy5	multiply 0.5 multiply m multiply  v5  v5
assign kineticEnergy10	multiply 0.5 multiply m multiply v10 v10
assign kineticEnergy15	multiply 0.5 multiply m multiply v15 v15
assign kineticEnergy20	multiply 0.5 multiply m multiply v20 v20
assign speed0CostEnergy		multiply v div kineticEnergy                     P
assign speed5CostEnergy		multiply v div max 0 sub kineticEnergy kineticEnergy5  P
assign speed10CostEnergy	multiply v div max 0 sub kineticEnergy kineticEnergy10 P
assign speed15CostEnergy	multiply v div max 0 sub kineticEnergy kineticEnergy15 P
assign speed20CostEnergy	multiply v div max 0 sub kineticEnergy kineticEnergy20 P

# Linear interpolation between energy optimal cost and time optimal cost.
#     cost = timeOptimalityFactor*      SpeedCostTime + (1-timeOptimalityFactor)*SpeedCostEnergy
# <=> cost = timeOptimalityFactor*0.5*SpeedCostEnergy + (1-timeOptimalityFactor)*SpeedCostEnergy
# <=> cost = (1-0.5*timeOptimalityFactor)*SpeedCostEnergy
#  => cost = factor*SpeedCostEnergy
assign factor      sub 1 multiply 0.5 timeOptimalityFactor
assign speed0Cost  multiply factor speed0CostEnergy
assign speed5Cost  multiply factor speed5CostEnergy
assign speed10Cost multiply factor speed10CostEnergy
assign speed15Cost multiply factor speed15CostEnergy
assign speed20Cost multiply factor speed20CostEnergy

# cost to dismount from bike
# For energy efficient cost, sum of:
# - cost for standing still and accelerating (speed0CostEnergy) 
# - cost for potential energy change due to lower cog of the biker (~15cm)
# For time efficient cost, sum of:
# - cost for stnanding still and accelerating (way difference to continuous 
#   travelling, 0.5 * Speed0Energy)
# - cost for time needed to dismounting (2s for dismount + 2s for mount)
# 
# Formula:
# initialPushCost =
#   (1-TOF) * (    speed0CostEnergy + height2Length*dismountCOGHeightDifference)
# +    TOF  * (0.5*speed0CostEnergy + v*dismountMountTime)
# <==>
# initialPushCost =
#   (1-0.5*TOF) * speed0CostEnergy
# +     (1-TOF) * height2Length*dismountCOGHeightDifference
# +        TOF  * v*dismountMountTime
# <==>
# initialPushCost =
#   speed0Cost
# + (1-TOF) * height2Length*dismountCOGHeightDifference
# +    TOF  * v*dismountMountTime
assign dismountCOGHeightDifference	0.15	# m - Difference of COG of biker between dismounted and mounted position
assign dismountMountTime			4		# s - Time needed to dismount and mount back again
assign initialPushCost	add speed0Cost
						add multiply sub 1 timeOptimalityFactor
						    multiply height2Length
							         dismountCOGHeightDifference
							multiply timeOptimalityFactor
							multiply v
									 dismountMountTime

# cost to enter a ferry
# For energy efficient cost, sum of:
# - cost for standing still and accelerating
# - cost for potential energy change due to lower cog of the biker (~15cm)
# For time efficient cost, sum of:
# - cost for standing still and accelerating (way difference to continuous
#   travelling)
# - cost for time needed to dismounting (2s for dismount + 2s for mount)
# - cost for waiting time (30min in average. One ferry every hour is assumed)
#
# Formula:
# initialFerryCost = 
#  (1-TOF) * (     speed0CostEnergy + height2Length*dismountCOGHeightDifference)
# +   TOF  * ( 0.5*speed0CostEnergy + v*dismountMountTime + v*ferryWaitingTime )
# <==>
# initialFerryCost = 
#  (1-TOF) * (     speed0CostEnergy + height2Length*dismountCOGHeightDifference) 
# +   TOF  * ( 0.5*speed0CostEnergy + v*dismountMountTime  )
# +   TOF  * ( v*ferryWaitingTime )
# <==>
# initialFerryCost =   initialPushCost + TOF * ( v*ferryWaitingTime )
assign ferryWaitingTime	multiply 30 60		# s - Waiting time for ferry (assumed one ferry every hour --> avg waiting time of 30min)
assign initialFerryCost add initialPushCost multiply timeOptimalityFactor multiply v ferryWaitingTime


# From https://en.wikipedia.org/wiki/Bicycle_performance#Energy_efficiency
# "a human at 70kg requires about 60W to walk at 5 km/h on a firm and flat 
# ground [1]"
# [1] https://dynamic-med.biomedcentral.com/counter/pdf/10.1186/1476-5918-8-4.pdf
# --> 60Wh for 5km --> 12Wh/km
# Energy for one km for the biker: --> bikerPower * 1h / bikerSpeed 
# Example: bikerPower = 165W, bikerSpeed = 26,3kmH ==> 6.27Wh/km
assign pushCostFactor		# additional cost for 5km/h walking/pushing pace
	div 12 div NominalPower Speed0

# For carrying it is assumed, that the needed energy is doubled compared to
# pushing
assign carryCostFactor
	multiply 2 pushCostFactor


# In open street maps normally to traffic signal nodes are passed for each 
# intersection. The cost are estimated by:
# - Traffic light cycle:						90s
# - Chance to hit green light:					50%
# - Average waiting time during red light:		45s/2 = 22.5s
# - Cost for accelerating back to travel speed:	speed0Cost
# Cost = timeOptimalityFactor * 0.5*22.5s*v          + speed0Cost 
#      = timeOptimalityFactor *     5.625*v          + speed0Cost 
#      = timeOptimalityFactor *     3.125*v(in km/h) + speed0Cost
# for v = 26.3kmh --> Cost  = 147.2m
assign	trafficSignalCost
	add speed0Cost multiply timeOptimalityFactor multiply 3.125 Speed0 


################################################################################
---context:way #################################################################
################################################################################


# Logic Values
################################################################################

# Cycleroute / Cycleway
#-------------------------------------------------------------------------------

# logical if way is part of a cycleroute
assign anyCycleroute 	 
	or route_bicycle_icn=yes 
	or route_bicycle_ncn=yes 
	or route_bicycle_rcn=yes 
	or route_bicycle_lcn=yes
	or route_bicycle_=yes
	or ncn=yes
	or rcn=yes
	   lcn=yes

# cycleway / Fahrradstreifen
# the flag is generated by checking if the opposite - so no cycleway - is true
# and than inverting this information
assign hasCycleway
	not and ( or cycleway=  cycleway=no|shared_lane|proposed ) 
		or  ( and     reversedirection=yes or cycleway:left=  cycleway:left=no|shared_lane   )		# shared lane are only bike signs on the street surface
		    ( and not reversedirection=yes or cycleway:right= cycleway:right=no|shared_lane  )
# https://taginfo.openstreetmap.org/keys/cycleway (11-2018)
# 750 000 tags "cycleway"
# 140 000 tags "cycleway:right"
#  60 000 tags "cycleway:left"
			
# protected bike lanes or bicycle roads
assign hasCyclewayTrack	
	or ( bicycle_road=yes )	#   7 342 tags "bicycle_road=yes"
	or ( cycleway=track ) 	# 114 000 tags "cycleway=track"
	or ( and     reversedirection=yes or cycleway:left=track|opposite_track or cycleway:right=opposite_track  cycleway=opposite_track )		
	   ( and not reversedirection=yes    cycleway:right=track )
# https://taginfo.openstreetmap.org/keys/cycleway (11-2018)
# 114 000 tags "cycleway=track"						
#  36 000 tags "cycleway:right=track"
#  14 000 tags "cycleway:left=track"
#   2 000 tags "cycleway=opposite_track"
#     300 tags "cycleway:right=opposite_track"
#     350 tags "cycleway:left=opposite_track"


# Access
#-------------------------------------------------------------------------------

# general access
assign defaultAccess
	if access=private|no then false
	else true

# bike access
assign bikeAccess
	if anyCycleroute then true
	else if bicycle= then
	(
		if vehicle= then
			if      highway=footway|pedestrian|steps then false
			else if foot=designated                  then false			# there are ways without vehicle or bicycle tag which are only a designated foot way.
			else defaultAccess
		else not vehicle=private|no
	)
	else not bicycle=private|no|dismount

# foot access
assign footAccess
	if bikeAccess then true
	else if bicycle=dismount then true
	else if foot= then defaultAccess
	else not foot=private|no

# oneway accessed in reversed and forbidden direction
assign badOneWay
	if reversedirection=yes then					
		if 		( oneway:bicycle=yes 									) then true	
		else if ( cycleway=opposite|opposite_lane|opposite_track 		) then false
		else if ( cycleway:left=opposite|opposite_lane|opposite_track	) then false
		else if ( cycleway:right=opposite|opposite_lane|opposite_track	) then false
		else if ( oneway:bicycle=no                               		) then false
		else if ( and oneway= junction=roundabout						) then true
		else if ( oneway=yes|true|1										) then true
		else false
	else 
		if 		( oneway=-1												) then true
		else false	

# Store if node access is granted independently of node type 
# if way is part of cycleroute, all nodes can be accessed
# "nodeaccessgranted" was the only "way" context variable which is available in 
# the "node" context. Nowadays, this restriction is not true anymore.
assign nodeaccessgranted 
	or anyCycleroute 
		lcn=yes


# Access Costs
################################################################################

# Check for access. With penalty 100000, the segment is ignored and not used
assign accessPenalty
	if      bikeAccess then 0
	else if footAccess then 0
	else                    100000

# store if this way segment can only be accessed by pushing or carrying the bike
assign isCarrying
	switch highway=steps 					true	# on steps, the bike needs to be carried
											false

assign isWalking
	or isCarrying									# carrying is a special case of walkung
	or badOneWay									# bad oneways are only allowed while pushing
	switch and footAccess not bikeAccess	true	# only foot access --> pushing
											false


# Surfaces
################################################################################

# Different Rolling resistances for car tires
#
# DE-Wikipedia: https://de.wikipedia.org/wiki/Rollwiderstand
# Rhetos: https://www.rhetos.de/html/lex/rollwiderstandskoeffizienten.htm
# KfT:  "Kraftfahrtechnisches Taschenbuch", page 418
#
# Surface      | norm | used  | DE-Wikipedia  | Rhetos       | comment
# -------------+------+-------+---------------+--------------+------------------
# asphalt      |  1.0 | 0.01  | 0.011 - 0.015 | 0.011 - 0.03 | good asphalt
# concrete     |  1.1 | 0.011 | 0.01  - 0.02  | 0.01  - 0.02 | quite good concrete
# metal        |  1.1 | 0.011 |               | 0.008 - .009 | it is slippery :-(
# paving_stones|  1.5 | 0.015 | 0.013 (KfT)   |              | 
# compacted    |  1.8 | 0.018 |               |              | between paving_stone and cobblestone
# wood         |  1.8 | 0.018 |               |              | between paving_stone and cobblestone (most on bridges with small gaps)
# sett         |  2.0 | 0.02  |               |              | between paving_stone and cobblestone
# pebblestone  |  2.4 | 0.024 |               |              | between gravel and compacted
# copplestone  |  2.5 | 0.025 | 0.015 - 0.03  | 0.015 - 0.03 | bike tires are small
# grass_paver  |  2.7 | 0.027 |               |              | even worse than cobblestone but better than gravel
# gravel       |  3.0 | 0.03  | 0.02          | 0.02         | bike tires are small
# ground       |  3.4 | 0.034 |               |              | between compacted and dirt
# fine_gravel  |  4.0 |       |               |              | 
# dirt         |  5.0 | 0.05  | 0.050         | 0.050        |
# sand         | 10.0 | 0.1   | 0.04  - 0.08  | 0.1   - 0.35 | compacted sand, bike tires are thin
# mud          | 15.0 |       |               |              | really don't want to be there
# potholes     |      |       | 0.03  - 0.06  |              | ashpalt with potholes
# clay         | compacted
# earth        | dirt
# grass        | dirt
# paved        | concrete
# unpaved      | dirt

# Assign costs 
#        AsphaltRes				 1.0
assign   concreteRes			 1.1
assign   metalRes				 1.1
assign   pavingStonesRes		 1.5
assign   compactedRes			 1.8
assign   woodRes				 1.8
assign   settRes				 2.0
assign   pebblestoneRes			 2.4
assign   cobblestoneRes			 2.5
assign   grassPaverRes			 2.7
assign   gravelRes				 3.0
assign   groundRes				 3.4
assign   fineGravelRes			 4.0
assign   dirtRes				 5.0
assign   sandRes				10.0
assign   mudRes					15.0
assign   pavingUnsureRes		groundRes


# cost factors
assign surfaceFactor	# 23Mio tags (11-2018) - https://taginfo.openstreetmap.org/keys/surface#values
    # 
    # Use cycleway surface with highest priority, since we use cycleways if 
    # available
    switch cycleway:surface=asphalt         1.0
    switch cycleway:surface=concrete|paved  concreteRes
    switch cycleway:surface=paving_stones   pavingStonesRes
    switch cycleway:surface=compacted       compactedRes
    switch cycleway:surface=sett            settRes
    switch cycleway:surface=cobblestone     cobblestoneRes
    switch cycleway:surface=gravel          gravelRes
    switch cycleway:surface=fine_gravel     fineGravelRes
    switch cycleway:surface=unpaved         dirtRes
    #
    # Highway surface
    switch     surface=asphalt					1.0
    switch and surface=concrete concrete=lanes	compactedRes
    switch and surface=concrete concrete=plates	pavingStonesRes
    switch     surface=concrete|paved 			concreteRes
    switch     surface=metal                    metalRes
    switch     surface=paving_stones            pavingStonesRes
    switch     surface=compacted|clay           compactedRes
    switch     surface=wood                     woodRes
    switch     surface=sett                     settRes
    switch     surface=pebblestone              pebblestoneRes
    switch     surface=cobblestone              cobblestoneRes
    switch     surface=grass_paver              grassPaverRes
    switch     surface=gravel                   gravelRes
    switch     surface=ground                   groundRes
    switch     surface=fine_gravel              fineGravelRes
    switch     surface=unpaved|dirt|earth|grass dirtRes
    switch     surface=sand                     sandRes
    switch     surface=mud                      mudRes
    #
	# best guess for unsure paving:
	switch highway=raceway                  1.0                 # Rennstrecke
	switch highway=motorway|motorway_link   1.0					# Autobahn und Auffahrten
	switch highway=trunk|trunk_link      	1.0					# Schnellstraßen (wie BAB) und Auffahrten
	switch highway=primary|primary_link    	1.0					# Bundesstraßen und Auffahrten
	switch highway=secondary|secondary_link	1.0					# Landstraßen und Auffahrten
	switch highway=tertiary|tertiary_link   1.0					# Kreisstraßen und Auffahrten
	switch highway=unclassified       		1.0					# Dorfstraßen	  
	switch highway=residential 				1.0					# Wohnstraße
	switch highway=rest_area|services       1.0                 # Rastplatz
	switch highway=corridor                 1.0                 # Hallway inside a building
	switch highway=crossing                 1.0                 # Street crossing
	switch highway=bus_stop                 1.0                 # Bus stop on the street
	switch highway=mini_roundabout          1.0                 # Mini roundabout in the street
	switch highway=turning_loop             1.0                 # Turning Loop
	switch highway=platform                 pavingStonesRes		# Bushaltestelle (wo die Personen stehen)
	switch highway=living_street 			pavingStonesRes		# Spielstraße
	switch highway=pedestrian   			settRes				# Fußgängerzone
	switch highway=service                  pavingStonesRes		# Zugangsstraßen
	switch highway=bridleway                compactedRes		# Reit- und Fußweg
	switch highway=cycleway                 pavingStonesRes		# Radweg
	switch highway=footway  				groundRes			# Gehweg
	switch highway=unsurfaced               dirtRes				# street without surface
	switch highway=road						pavingUnsureRes	# unbekannter Typ
	#
	# for highway=track, check the tracktype
	switch and highway=track tracktype=grade1	1.0										# Asphalt surface
	switch and highway=track tracktype=grade2	compactedRes							# mostly solid
	switch and highway=track tracktype=grade3	multiply 0.5 add compactedRes groundRes	# Even mixture of hard and soft materials.
	switch and highway=track tracktype=grade4	groundRes								# Mostly soft
	switch and highway=track tracktype=grade5	dirtRes									# soft
	switch and highway=track tracktype=			dirtRes									# unknown, but most likely soft
	#
	# for highway=path, check the tracktype	(sometimes a track is wrongly annotaded as a path and a tracktype is added)
	switch and highway=path tracktype=grade1	1.0										# Asphalt surface
	switch and highway=path tracktype=grade2	compactedRes							# mostly solid
	switch and highway=path tracktype=grade3	multiply 0.5 add compactedRes groundRes	# Even mixture of hard and soft materials.
	switch and highway=path tracktype=grade4	groundRes								# Mostly soft
	switch and highway=path tracktype=grade5	dirtRes									# soft
	switch and highway=path tracktype=			dirtRes									# unknown, but most likely soft
	#
	# Default if really unknown
											pavingUnsureRes


# 1.34 Mio tags (11-2018) - https://taginfo.openstreetmap.org/keys/smoothness#values
assign smoothnessFactor
	# http://wiki.openstreetmap.org/wiki/Key:smoothness
	switch smoothness=excellent|very_good		1.0												# thin_rollers - roller blade, skate board
	switch smoothness=good		 				multiply 0.5 add 1.0 pavingStonesRes			# thin_wheels - racing bike
	switch smoothness=intermediate				pavingStonesRes									# wheels - city bike, wheel chair, sport cars
	switch smoothness=bad|robust_wheels			cobblestoneRes									# robust wheels - trekking bike, normal cars
	switch smoothness=very_bad|high_clearance	dirtRes											# high clearance - normal cars with slightly higher clearance
	switch smoothness=horrible|off_road_wheels	multiply 2 dirtRes								# off road wheels - off road cars 
	switch smoothness=very_horrible				mudRes											# specialized off road vehicles - ATV, tractor
	switch smoothness=impassable              	multiply 2 mudRes								# no wheeled vehicle - hiking path 
	#
	# If smoothness is not given, estimate smoothness on mtb:scale property
	switch mtb:scale=0	dirtRes										# Gravel or packed earth. No particular difficulties. --> smoothness=very_bad
	switch mtb:scale=1	multiply 2.0 dirtRes						# roots and small stones. --> smoothness=horrible
	switch mtb:scale=2	multiply 0.5 add mudRes multiply 2 dirtRes	# large rocks and stones. --> smoothness=mean(horrible & very_horrible)
	switch mtb:scale=3	mudRes										# large obstacles such as boulders and large roots. --> smoothness=very_horrible
	switch mtb:scale=4	multiply 1.5 mudRes							# large boulders, roots. --> smoothness=mean(very_horrible & impassable)
	switch mtb:scale=5	multiply 2.0 mudRes							# big boulder fields, debris, landslides.  --> smoothnes=impassable
	switch mtb:scale=6	multiply 2.5 mudRes							# more than impassable :-)
						surfaceFactor								# not known

# use mean value of surface and smoothness for an indicator of the current 
# surface quality / rolling resistance
assign rollingResistanceFactor
	multiply 0.5 add surfaceFactor smoothnessFactor

# Rolling resistance cost are scaled by the timeOptimalityFactor. Additionally
# scale with carryCostFactor or walkingcostfactor if carrying or walking since
# this is the efficiency factor for walking or carrying
assign rollingResistanceCost
	multiply
		switch isCarrying	carryCostFactor		# Use carrrycostfactor if carrying
		switch isWalking	pushCostFactor		# if otherwise walking, it has to be pushing
							1					# Default
		multiply rollingResistanceFactor sub 1 timeOptimalityFactor

# Speed
################################################################################

# The maximum allowed speed is used for traffic cost calculation and for routing 
# in case of lower allowed speed than reachable speed on the bike

# km/h
assign maxSpeedBackward
	switch maxspeed:backward=10		 10
	switch maxspeed:backward=20		 20
	switch maxspeed:backward=30		 30
	switch maxspeed:backward=40		 40
	switch maxspeed:backward=50		 50
	switch maxspeed:backward=60		 60	
	switch maxspeed:backward=70		 70
	switch maxspeed:backward=80		 80
	switch maxspeed:backward=90		 90
	switch maxspeed:backward=100	100
	switch maxspeed:backward=110	110
	switch maxspeed:backward=120	120
	switch maxspeed:backward=130	130
	switch maxspeed:backward=urban	 50
	switch maxspeed:backward=rural	100
									999

# km/h	
assign maxSpeedForward
	switch maxspeed:forward=10		 10
	switch maxspeed:forward=20		 20
	switch maxspeed:forward=30		 30
	switch maxspeed:forward=40		 40
	switch maxspeed:forward=50		 50
	switch maxspeed:forward=60		 60	
	switch maxspeed:forward=70		 70
	switch maxspeed:forward=80		 80
	switch maxspeed:forward=90		 90
	switch maxspeed:forward=100		100
	switch maxspeed:forward=110		110
	switch maxspeed:forward=120		120
	switch maxspeed:forward=130		130
	switch maxspeed:forward=urban	 50
	switch maxspeed:forward=rural	100
									999

# Max speed allowed by regulations
# km/h
assign maxAllowedSpeed
	# Direction wise
	switch and not reversedirection=yes lesser maxSpeedForward  999		maxSpeedForward
	switch and     reversedirection=yes lesser maxSpeedBackward 999		maxSpeedBackward
	# Maxspeed Tag
	switch maxspeed=10							 10
	switch maxspeed=20							 20
	switch maxspeed=30							 30
	switch maxspeed=40							 40
	switch maxspeed=50							 50
	switch maxspeed=60							 60	
	switch maxspeed=70							 70
	switch maxspeed=80							 80
	switch maxspeed=90							 90
	switch maxspeed=100							100
	switch maxspeed=110							110
	switch maxspeed=120							120
	switch maxspeed=130							130
	switch maxspeed=urban						 50
	switch maxspeed=rural						100
	# Zone Tag
	switch zone:maxspeed=20						 20
	switch zone:maxspeed=30						 30
	# Way type
	switch highway=motorway|motorway_link		130 # Autobahn (BAB) und Auffahrten
	switch motorroad=yes						120 # Kraftfahrstraße (wie BAB)
	switch highway=trunk|trunk_link				120 # Schnellstraßen (wie BAB) und Auffahrten
	switch highway=primary|primary_link			100 # Bundesstraßen und Auffahrten
	switch highway=secondary|secondary_link 	100 # Landstraßen und Auffahrten
	switch highway=tertiary|tertiary_link		100 # Kreisstraßen und Auffahrten
	switch highway=unclassified					 50 # Dorfstraßen
	switch highway=residential					 30 # Wohnstraße
	switch highway=service						 30 # Zugangsstraßen
	switch highway=cycleway						 30 # Radweg
	switch highway=living_street				 10 # Spielstraße
	switch highway=pedestrian					 10 # Fußgängerzone
	switch and bicycle=designated
	       highway=bridleway|footway			 30 # Designated bike lanes/ways on footways
	switch highway=bridleway					 10 # Reit- und Fußweg
	switch highway=footway						 10 # Gehweg
	switch highway=path							100 # Pfad
	switch highway=track						100 # Feldweg
	switch highway=road							100 # unbekannter Typ
	switch highway=steps						  5 # Treppen
												100 # Default (unknown max speed)

# Max desired speed by the biker in km/h
# This speed might be lower than the maximum allowed speed (and thus the traffic
# speed)
# The absolute maximum speed "maxBikerSpeed" is scaled by the 
# rollingResistanceFactor to consider the slower desired speed at bad surfaces.
assign maxDesiredSpeed
	min								div maxBikerSpeed rollingResistanceFactor
	min switch isCarrying						2.5	999		# Speed while carrying the bike
	min switch isWalking						5	999		# Speed while pushing the bike
	max switch or hasCycleway anyCycleroute		25	0		# Cycleroutes and cycleways are assumed to be more bike friendly and allow at least 25km/h
	# some special ways
	# Now from fast to slow :-) 
	switch highway=track 							 40		# Feldweg
	switch and highway=path tracktype=grade1|grade2	 40		# Feldweg (Track which is not annotaded according to OSM standards)
	switch bicycle=designated						 30		# Max. Geschw. bei Fahrradwegen wird unabhaengig von der Art der Strasse zu 30km/h angenommen
	switch highway=cycleway							 30		# Radweg
	switch highway=unclassified						 30		# Dorfstraßen
	switch highway=residential 						 25		# Wohnstraße
	switch highway=service							 25		# Zugangsstraßen
	switch highway=path								 20		# Pfad
	switch highway=footway							 15		# Gehweg
	switch route=ferry								 10		# Fähren (Bodenseefähre Konstanz, 4.4km/25min = 10.5km/h)
	switch highway=steps							  2.5	# Treppen
													999		# Default

# Compute maximum biker speed:
# - the biker does never exceed the maximum desired speed for the given highway
# - the biker might exceed the maximum allowed speed by 10% or 5km/h
assign bikeSpeedLimit
	min 
		maxDesiredSpeed 
		max
			multiply 1.1 maxAllowedSpeed
			add      5.0 maxAllowedSpeed

# speed for uphills and downhills  with "SlopeMax"
# Here the additional current rolling resistance is included into the speed
# calculation
assign equivSlopeCr			multiply 100 multiply Cr sub rollingResistanceFactor 1	# Equivalent (virtual) slope due to rolling resistance difference to asphalt
assign speeddvds			div sub Speedp2 Speed0 2								# Better approx. if speed for 0% and 2% is used for virtual slope due to rolling resistance
assign bikeSpeed			add Speed0 multiply speeddvds equivSlopeCr
assign speeddvds			div sub bikeSpeed Speedm8 add 8 equivSlopeCr
assign bikeSpeedDownhill	add Speedm8 multiply speeddvds equivSlopeCr
assign speeddvds			div sub Speedp8 bikeSpeed sub 8 equivSlopeCr
assign bikeSpeedUphill		max 0 add Speedp8 multiply speeddvds equivSlopeCr

# Limit bike speed
# Since the speed limitation is nonlinear with respect to the slope, but the
# Brouter computation is linear (interpolation), this step is not quite
# accurate, but there is no other known better solution. 
assign limitedBikeSpeed			min bikeSpeedLimit bikeSpeed
assign limitedBikeSpeedUphill	min bikeSpeedLimit bikeSpeedUphill
assign limitedBikeSpeedDownhill	min bikeSpeedLimit bikeSpeedDownhill

# routing should be at least partially done time optimal
#
assign speedCost			multiply timeOptimalityFactor div Speed0 limitedBikeSpeed
assign speedCostUphill		multiply timeOptimalityFactor div Speed0 limitedBikeSpeedUphill
assign speedCostDownhill	multiply timeOptimalityFactor div Speed0 limitedBikeSpeedDownhill


# Traffic
################################################################################

# Remark: current DTV 2020 in Baden-Württemberg (Germany)
# 2020 - https://mobidata-bw.de/vm/Endergebnisse_Strassenverkehrszaehlung_BW/Ergebnisse_2020_Excel.zip
# 2010 - https://mobidata-bw.de/vm/Endergebnisse_Strassenverkehrszaehlung_BW/Ergebnisse_2011_Excel.zip
#
# Vehicles per Day 2020 DTV (sum of both direction)
#
# Street with			2Lanes	3Lanes	4Lanes	6Lanes
#-------------------------------------------------------------------------------
# Autobahn:		58540					24535	82296
# Bundestraße:	13821	11153	13314	28440	34845
# Landstraße:	 5904	 5676			19949
# Kreisstraße:	 2611	 2562	 3049	 8527
#
# At least 10 measurement points with streets with each number of lanes had to
# be existing to be in this list.

# Get number of lanes for current highway
assign nLanes
	switch oneway=yes|true|1
		switch lanes=1	1
		switch lanes=2	2
		switch lanes=3	3
		switch lanes=4	4
		switch lanes=5	5
		switch lanes=6	6
		switch lanes=7	7
						1
	# else
		switch lanes=1	0.5
		switch lanes=2	1
		switch lanes=3	1.5
		switch lanes=4	2
		switch lanes=5	2.5
		switch lanes=6	3
		switch lanes=7	3.5
						1

# Traffic per highway type per hour (!)
assign trafficPerHighway
	switch highway=trunk|trunk_link			# Schnellstraßen (wie BAB) und Auffahrten
		switch lesser nLanes 3		multiply 255.6 nLanes	# 24535/24/4 =~ 255.6
									multiply 571.5 nLanes	# 82296/24/6 =~ 571.5
	switch highway=primary|primary_link		# Bundesstraßen und Auffahrten
		switch lesser nLanes 1.5	multiply 232.4 nLanes	# 11153/24/2 =~ 232.4
		switch lesser nLanes 2		multiply 184.9 nLanes	# 13314/24/3 =~ 184.9
		switch lesser nLanes 3		multiply 296.3 nLanes	# 28440/24/4 =~ 296.3
									multiply 242.0 nLanes	# 34845/24/6 =~ 242.0
	switch highway=secondary|secondary_link	# Landstraßen und Auffahrtenc
		switch lesser nLanes 2		multiply 123.0 nLanes	#  5904/24/2 =~ 123.0
									multiply 207.8 nLanes	# 19949/24/4 =~ 207.8
	switch highway=tertiary|tertiary_link	# Kreisstraßen und Auffahrten
		switch lesser nLanes 1.5	multiply  53.4 nLanes	# 2562/24/2 =~ 53.4
		switch lesser nLanes 2		multiply  42.3 nLanes	# 3049/24/3 =~ 42.3
									multiply  88.8 nLanes	# 8527/24/4 =~ 88.8
	switch highway=unclassified		0		# Dorfstraßen	  
	switch highway=residential		0		# Wohnstraße
	switch highway=service			0		# Zugangsstraßen
	switch highway=living_street	0		# Spielstraße
	switch highway=pedestrian		0		# Fußgängerzone
	switch highway=bridleway		0		# Reit- und Fußweg
	switch highway=cycleway			0		# Radweg
	switch highway=footway			0		# Gehweg
	switch highway=path				0		# Pfad 
	switch highway=track 			0		# Feldweg
	switch highway=road				0		# unbekannter Typ
									0		# Default


# Different traffic classes
# Source -- https://forum.openstreetmap.org/viewtopic.php?id=31044
# Quote:
# Die Verkehrssumme drückt grob gesagt aus, wieviel Meter Wohnstrasse (oder 
# <= Tempo50 Strasse) eine Strasse versorgt, wobei diese Versorgungsbeziehung 
# noch entfernungsabhängig untersrückt wird mit 20km Längenskala. Für den
# Pseudotag wird dieser Wert logarithmiert bzw. folgendermassen gemappt:
# 
# summe >   5000   estimated_traffic_class=1
# summe >  10000   estimated_traffic_class=2
# summe >  20000   estimated_traffic_class=3
# summe >  40000   estimated_traffic_class=4
# summe >  80000   estimated_traffic_class=5
# summe > 160000   estimated_traffic_class=6
# summe > 320000   estimated_traffic_class=7
#
# Traffic per hour dependency with traffic class is only a feeling without any
# data proving this values
assign trafficPerClass
	switch estimated_traffic_class=7	3168
	switch estimated_traffic_class=6	1584
	switch estimated_traffic_class=5	 792
	switch estimated_traffic_class=4	 396
	switch estimated_traffic_class=3	 198
	switch estimated_traffic_class=2	  99
	switch estimated_traffic_class=1	  50
										   0

assign traffic div add trafficPerClass multiply 2 trafficPerHighway 3

# actual speed of vehicles will be estimated by the minimum of the taged max 
# allowed speed and some estimations (for Germany)
assign vehicleSpeed
	min maxAllowedSpeed	
	switch highway=motorway|motorway_link   130	# Autobahn (BAB) und Auffahrten
	switch motorroad=yes					130	# Kraftfahrstraße (wie BAB)
	switch highway=trunk|trunk_link			120	# Schnellstraßen (wie BAB) und Auffahrten
	switch highway=primary|primary_link		100	# Bundesstraßen und Auffahrten
	switch highway=secondary|secondary_link	 90	# Landstraßen und Auffahrten
	switch highway=tertiary|tertiary_link	 80	# Kreisstraßen und Auffahrten
	switch highway=unclassified				 40	# Dorfstraßen	  
	switch highway=residential				 30	# Wohnstraße
	switch highway=service					 30	# Zugangsstraßen
	switch highway=living_street 			 10	# Spielstraße
											 90 # Default

# Compute overtaking vehicles per meter depending on bike speed
assign bikeSpeedForTraffic         max limitedBikeSpeed         1	# use at least 1km/h --> div by zero
assign bikeSpeedForTrafficUphill   max limitedBikeSpeedUphill   1
assign bikeSpeedForTrafficDownhill max limitedBikeSpeedDownhill 1
assign overtakingsPerHour          multiply traffic div max 0 sub vehicleSpeed bikeSpeedForTraffic         vehicleSpeed
assign overtakingsPerHourUphill    multiply traffic div max 0 sub vehicleSpeed bikeSpeedForTrafficUphill   vehicleSpeed
assign overtakingsPerHourDownhill  multiply traffic div max 0 sub vehicleSpeed bikeSpeedForTrafficDownhill vehicleSpeed
assign overtakingsPerMeter         div overtakingsPerHour         multiply 1000 bikeSpeedForTraffic
assign overtakingsPerMeterUphill   div overtakingsPerHourUphill   multiply 1000 bikeSpeedForTrafficUphill
assign overtakingsPerMeterDownhill div overtakingsPerHourDownhill multiply 1000 bikeSpeedForTrafficDownhill

# Treat traffic penalty differently for cycling lanes		
assign trafficVehicleCostScaled 
	multiply 0.925 multiply TrafficVehicleCost 	# Multiplication with 0.925 to get a better linear approximation of the trafficCost-over-slope curve
		switch hasCyclewayTrack	0.00
		switch hasCycleway 			0.5 
									1.0

# Compute traffic cost
assign trafficCost 			multiply overtakingsPerMeter         trafficVehicleCostScaled
assign trafficCostUphill 	multiply overtakingsPerMeterUphill   trafficVehicleCostScaled
assign trafficCostDownhill 	multiply overtakingsPerMeterDownhill trafficVehicleCostScaled


# Noise
################################################################################
# Source -- Brouter Sources, /environmental_considerations_and_pseudo_tags.md
# Quote:
# For proximity of noisy roads (secondary and higher). The noise factor 
# represents the proportion of a road's buffer area that lies within the 
# 64-meter buffer of noisy roads. This proportion is reduced:
# - for motorways and trunk roads with max speed < 105 by 1.5
# - for primary roads 2 times
# - 3 times if maxspeed is 75 - 105 for primary and secondary
# - other secondary roads 5 times
#
# `noise_class` is roughly proportional to the noise factor:
# | `noise_factor` | `noise_class` |
# | -------------- | ------------- |
# | < 0.1          | 1             |
# | < 0.25         | 2             |
# | < 0.4          | 3             |
# | < 0.55         | 4             |
# | < 0.8          | 5             |
# | ELSE           | 6             |
#
# To be classified as noise class 6, a way must be less than 13 m on average
# from the middle of the carriageway of a motorway with a maximum speed 
# exceeding 105. For a class 5, the distance must be up to 35 meters.
# (1 - noise_factor) \* 64 m for a given class determines the distance
# | highway        | maxspeed | max `noise_class` |
# | -------------- | -------- | ----------------- |
# | motorway,trunk | > 105    | 6                 |
# | motorway,trunk | 105      | 5                 |
# | motorway,trunk | 75       | 5                 |
# | primary        | > 105    | 4                 |
# | primary        | 105      | 4                 |
# | primary        | 75       | 3                 |
# | secondary      | > 105    | 3                 |
# | secondary      | 105      | 3                 |
# | secondary      | 75       | 2                 |
assign noiseFactor
	switch estimated_noise_class=6	0.90
	switch estimated_noise_class=5	0.675
	switch estimated_noise_class=4	0.475
	switch estimated_noise_class=3	0.3625
	switch estimated_noise_class=2	0.175
	switch estimated_noise_class=1	0.05
									0

assign noiseFactor div noiseFactor 0.9		# normalize

assign weightedNoiseCost
	switch AvoidNoisyRoads
		multiply noiseCost noiseFactor
		0


# Green
################################################################################
# Source -- Brouter Sources, /environmental_considerations_and_pseudo_tags.md
# Quote:
# OSM data recognized as forest:
# - landuse: forest, allotments, flowerbed, orchard, vineyard,
#   recreation_ground, village_green
# - leisure: garden, park, nature_reserve
# 
# No forest buffers are used.
# 
# Imagine you trace the way with a pencil drawing lines 62 meters wide. Then
# estimated_forest_class=6 corresponds to the case that at least 98% of the line
# is in the woodland. This number is called a green factor.
#
# | `green_factor` | `forest_class` |
# | -------------- | -------------- |
# | < 0.1          | NULL           |
# | < 0.2          | 1              |
# | < 0.4          | 2              |
# | < 0.6          | 3              |
# | < 0.8          | 4              |
# | < 0.98         | 5              |
# | ELSE           | 6              |

assign greenFactor
	switch estimated_forest_class=6	0.99
	switch estimated_forest_class=5	0.89
	switch estimated_forest_class=4	0.70
	switch estimated_forest_class=3	0.50
	switch estimated_forest_class=2	0.30
	switch estimated_forest_class=1	0.15
									0

assign greenFactor div greenFactor 0.99		# normalize

assign weightedGreenCost
	switch PreferGreen
		multiply greenCost greenFactor
		0


# Water
################################################################################
# Source -- Brouter Sources, /environmental_considerations_and_pseudo_tags.md
# Quote:
# OSM data recognized as river:
# - waterway: river, canal
# - natural: water (except wastewater)
# 
# Waterways have 32 m wide buffers. Water areas have 77 m wide buffers.
# 
# | `river_see` | `river_class` |
# | ----------- | ------------- |
# | < 0.1       | 1             |
# | < 0.3       | 2             |
# | < 0.5       | 3             |
# | < 0.8       | 4             |
# | < 0.9       | 5             |
# | ELSE        | 6             |

assign waterFactor
	switch estimated_river_class=6	0.95
	switch estimated_river_class=5	0.85
	switch estimated_river_class=4	0.65
	switch estimated_river_class=3	0.40
	switch estimated_river_class=2	0.20
	switch estimated_river_class=1	0.05
									0

assign waterFactor div waterFactor 0.95		# normalize

assign weightedWaterCost
	switch PreferWater
		multiply waterCost waterFactor
		0


# Highway Type
################################################################################

# here only costs not handled by the other parts are applied
# 128 Mio tags,  (11-2018) - https://taginfo.openstreetmap.org/keys/smoothness#values
assign highwayCost
	
	# disallow non existing highways, motorways and motorroads
	switch and highway= not route=ferry  				10000	# exclude rivers, rails etc.
	switch    highway=proposed|abandoned|construction   10000	# construction sites 
	
	#
	# all other exclusions below (access, steps, ferries,..)
	# should not be deleted by the decoder, to be available
	# in voice-hint-processing (if cost are >=10000, the decoder will delete them)
	switch and not AllowFerries route=ferry				 9999
	switch and not AllowSteps   highway=steps			 9999
	
	# Exceptions which shal not be penalized
	switch hasCycleway							0
	switch bicycle_road=yes						0		# Fahrradrstraßen
	switch railway=abandoned					0		# Abandoned railways are quite a good bicycle route :-) 

	# highway cost
	switch     highway=motorway|motorway_link	 9999		# Autobahn (BAB) und Auffahrten
	switch     motorroad=yes					 9999		# Kraftfahrstraße (wie BAB)
	switch     highway=trunk|trunk_link      	   10		# Schnellstraßen (wie BAB) und Auffahrten
	switch     highway=primary|primary_link     	0.0		# Bundesstraßen und Auffahrten
	switch     highway=secondary|secondary_link 	0.0		# Landstraßen und Auffahrten
	switch     highway=tertiary|tertiary_link   	0.0 	# Kreisstraßen und Auffahrten
	switch     highway=unclassified       			0.0		# Kommunalstraßen
	switch     highway=residential 					0.1		# Wohnstraße		(mehr Kreuzungen)
	switch     highway=service                  	0.1 	# Zugangsstraßen	(mehr Kreuzungen)
	switch     highway=living_street 				0.1		# Spielstraße		(mehr Kreuzungen)
	switch     highway=pedestrian   				0.0		# Fußgängerzone
	switch     highway=bridleway                	0.0		# Reit- und Fußweg
	switch     highway=cycleway                 	0.0		# Radweg
	switch     highway=footway  					0.0		# Gehweg
	switch     highway=track 						0.0		# Feldweg
	switch and highway=path tracktype=grade1|grade2	0.0		# Path which is a track but is wrongly annotaded
	switch and highway=path bicycle=designated		0.0		# Path which is a designated bicycle track
	switch and highway=path anyCycleroute			0.0		# Path which as part of an official cycle route
	switch     highway=path  						0.2 	# Pfad 
	switch     highway=road							0.0		# unbekannter Typ
	switch     highway=steps                        0.0		# Treppen
	switch     route=ferry                      	0.0 	# Fähren
													0.0		# Default


# Miscellaneous costs
################################################################################

#
# handle one-ways. On primary roads, wrong-oneways should be close to forbidden.
# On all other ways, it is assumed, that the bike is pushed on a bad oneway.
#
assign oneWayCost
	add
 		if ( badOneWay ) then
		(
			if      ( junction=roundabout|circular     ) then 60
			else if ( highway=primary|primary_link     ) then 50
			else if ( highway=secondary|secondary_link ) then 30
			else if ( highway=tertiary|tertiary_link   ) then 20
			else 											   0
		)
		else 0.0
		# for one-ways which are allowed to be accessed in "wrong"
		# direction by bike, add a small penalty to reduce usage of them
		switch and and reversedirection=yes oneway=yes|true|1 oneway:bicycle=no	0.1	0
	
# prefer cycleroutes
assign cycleRouteFavor 
	switch and StickToCycleRoute anyCycleroute		cycleRouteCost	0


# Final calculation of costs
################################################################################

# Costfactor
#-------------------------------------------------------------------------------
# calculate the cost-factor, which is the factor by which the distance of a 
# way-segment is multiplied to calculate the cost of that segment. The 
# costfactor should be >=1 and it's supposed to be close to 1 for the type of
# way the routing profile is searching for

# common cost independently of slope
assign commonCostFactor
	#
	# exceptions with sub-cost below 10000 (motorway, bad one-way, ...)  should
	# not be deleted by the decoder, to be available in voice-hint-processing
	# (if cost are >=10000, the decoder will delete them)
	switch greater max accessPenalty highwayCost 9999	10000
	min 9999										# make sure that costfactor is less or equal 9999
	add accessPenalty								# access penalty
	add rollingResistanceCost						# Cost for surface / rolling resistance
	add highwayCost									# cost for different types of highway
	add	oneWayCost									# cost for cycling against oneways for cars only
	add cycleRouteFavor								# (negative) cost for cycleroutes
	add weightedNoiseCost							# Cost for noisy roads
	add weightedGreenCost							# Cost (or better incentive) for green ways
		weightedWaterCost							# Cost (or better incentive) for ways next to rivers
	

# for flat terrain
assign costfactor
	switch greater commonCostFactor 9999	10000	# If forbidden --> 10000, else the following
	min 9999										# make sure that costfactor is less or equal 9999
	add commonCostFactor							# common cost independently of slope
	add speedCost									# speed cost
		trafficCost									# traffic cost
	
# for uphill terrain
assign uphillcostfactor
	switch greater commonCostFactor 9999	10000	# If forbidden --> 10000, else the following
	min 9999										# make sure that costfactor is less or equal 9999
	add commonCostFactor							# common cost independently of slope
	add speedCostUphill								# speed cost
		trafficCostUphill							# traffic cost
		
# for downhill terrain		
assign downhillcostfactor
	switch greater commonCostFactor 9999	10000	# If forbidden --> 10000, else the following
	min 9999										# make sure that costfactor is less or equal 9999
	add commonCostFactor							# common cost independently of slope
	add speedCostDownhill							# speed cost
		trafficCostDownhill							# traffic cost


# Initial Costs 
#-------------------------------------------------------------------------------

#
# for any change in initialclassifier, initialcost is added once
#
assign initialclassifier
     if      route=ferry then classifierFerry
     else if isWalking   then classifierWalking
	 else	classifierNone 				  
#
# calculate the initial cost
# this is added to the total cost each time the initialclassifier changes
#
assign initialcost
	switch ( equal initialclassifier classifierFerry   )	initialFerryCost
	switch ( equal initialclassifier classifierWalking )	initialPushCost
															0	   


# Turn Costs
#-------------------------------------------------------------------------------

# this is the cost (in Meter) for a 90-degree turn
# The actual cost is calculated as turncost*cos(angle)
# Turncost is scaled by the cost for speed of the bike, surface and speed limit.
# The faster you go, the less you want to turn because that means deceleration
#
assign turncost = if junction=roundabout then 0
                  else speed0Cost


# Voice hint generation stuff
################################################################################

# way priorities used for voice hint generation
assign priorityclassifier
	switch highway=motorway						30
	switch highway=motorway_link				29
	switch highway=trunk						28
	switch highway=trunk_link					27
	switch highway=primary						26
	switch highway=primary_link					25
	switch highway=secondary					24
	switch highway=secondary_link				23
	switch highway=tertiary						22
	switch highway=tertiary_link				21
	switch highway=unclassified					20
	switch highway=residential|living_street	6
	switch highway=service						6
	switch highway=cycleway						6
	switch bicycle=designated					6
	switch highway=track
		switch tracktype=grade1					6
												4
	switch highway=bridleway|road|path|footway	4
	switch highway=steps						2
	switch highway=pedestrian					2
												0

# some more classifying bits used for voice hint generation...
assign isbadoneway		badOneWay
assign isgoodoneway		if reversedirection=yes then oneway=-1
						else if oneway= then junction=roundabout else oneway=yes|true|1
assign isroundabout		junction=roundabout
assign islinktype		highway=motorway_link|trunk_link|primary_link|secondary_link|tertiary_link
assign isgoodforcars	if greater priorityclassifier 6 then true
						else if highway=residential|living_street|service then true
						else if ( and highway=track tracktype=grade1 ) then true
						else false


# Save some information for node context
################################################################################
assign iswayreverse	reversedirection=yes


################################################################################
---context:node ################################################################
################################################################################

# Logic Values
################################################################################

# Access
#-------------------------------------------------------------------------------
assign defaultAccess
       switch access=
              1 # add default barrier restrictions here!
              switch or access=private access=no
                     0
                     1

assign bikeAccess
       or nodeaccessgranted=yes
          switch bicycle=
                 switch vehicle=
                        defaultAccess
                        switch or vehicle=private vehicle=no
                               0
                               1
                 switch or bicycle=private or bicycle=no bicycle=dismount
                        0
                        1

assign footAccess
       or bicycle=dismount
          switch foot=
                 defaultAccess
                 switch or foot=private foot=no
                        0
                        1


# Cost
################################################################################

# Access
#-------------------------------------------------------------------------------
assign initialcost
  switch bikeAccess
    0 				# legal --> no cost
    switch footAccess
      0				# legal, mount and dismount cost is done in way context
      1000000		# illegal to use

# Traffic Lights
#-------------------------------------------------------------------------------
assign trafficLightCost
	switch highway=traffic_signals
		switch traffic_signals:direction=both			trafficSignalCost
		switch traffic_signals:direction=forward
			switch not way:iswayreverse					trafficSignalCost 0
		switch traffic_signals:direction=backward
			switch way:iswayreverse						trafficSignalCost 0
		div trafficSignalCost 2
	0

# Traffic Calming
#-------------------------------------------------------------------------------
assign trafficCalmingCost
	switch traffic_calming=bump				speed10Cost
	switch traffic_calming=dip				speed10Cost
	switch traffic_calming=hump				speed20Cost
	switch traffic_calming=table			speed20Cost
	switch traffic_calming=rumble_strip		speed20Cost
											0

# Barrier
#-------------------------------------------------------------------------------
# Only apply initial pushcost for node if the biker is not already walking
#
# Currently it is not possible to detect if the following way segment is a 
# pushing segment. Thus, in this situation, the initialPushCost is applied
# twice. 
assign pushCost	switch way:isWalking	0	initialPushCost

assign barrierCost
	#
	# Cost even while walking:
	
	# Bike and biker need to be lifted over the gate
	switch barrier=stile			add pushCost multiply height2Length 1
	# Bike needs to be lifted over the gate. Since the bike has to be lifted 
	# quite high, same energy is assumed as for "stile" barrier
	switch barrier=kissing_gate		add pushCost multiply height2Length 1
	# Bike needs to be lifted over the gate. Since the bike has to be lifted 
	# quite high, same energy is assumed as for "stile" barrier	
	switch barrier=turnstile		add pushCost multiply height2Length 1
	# Energy and time for opening and closing the gate is assumed to be the same
	#  as for twice Dismount and Mount back again
	switch barrier=hampshire_gate	add pushCost multiply 2 initialPushCost
	
	#
	# No costs while walking:
	switch way:isWalking			0
	switch barrier=gate				pushCost
	switch barrier=bollard			0
	switch barrier=lift_gate		speed0Cost
	switch barrier=cycle_barrier	speed5Cost
	switch barrier=entrance			0
	switch barrier=block			0
	switch barrier=cattle_grid		speed5Cost
	switch barrier=sally_port		0
	switch barrier=chain			speed5Cost
	switch barrier=door				pushCost
	switch barrier=swing_gate		speed5Cost
	switch barrier=bump_gate		pushCost
									0

# Final Cost
#-------------------------------------------------------------------------------
assign initialcost 
	add initialcost
	add	trafficLightCost
	add trafficCalmingCost
		barrierCost


################################################################################
# Coding Guidelines ############################################################
################################################################################

# Naming:
################################################################################
# UserParameter		user changeable parameters	CamelCases starting with capital letter
# genaralVariable	general variable			CamelCases starting with small letter
# localvaribale		local variable				all small letters
# broutervariable	Brouter varibales			all small letters 
#
# Annotation:
################################################################################

# Headlines:
#-------------------------------------------------------------------------------

################################################################################
# H1 ###########################################################################
################################################################################

# H2                                                                         
################################################################################

# H3
#-------------------------------------------------------------------------------

