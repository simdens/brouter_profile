################################################################
#          A BRouter profile suited for a road bike            #
#          for long distance travels                           #
#                                                              #
#          Avoids bad surfaces, hills and high traffic         #
################################################################

# Some of the profile is inspired by:
# - default profiles of brouter  
#   https://github.com/abrensch/brouter
# - trekking profile by poutnikl
#   https://github.com/poutnikl/Brouter-profiles

################################################################
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! #
# !! the forked version of brouter by simdens is needed     !! #
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! #
################################################################

---context:global   # following code refers to global config

# user parameters
# those parameters are used to compute elevation costs
assign   SystemWeight			100			# %SystemWeight% 		| weight of system (bike+cyclist+luggage) in kg | number
assign   NominalPower			165			# %NominalPower% 		| continuous available power of cyclist in Watts | number
assign	 NominalSpeed			26.3		# %NominalSpeed% 		| nominal speed in km/h -- http://www.kreuzotter.de/deutsch/speed.htm | number
assign   DownhillSpeed  		62.5		# %DownhillSpeed% 		| speed for downhills with 10% slope in km/h -- http://www.kreuzotter.de/deutsch/speed.htm | number

# additional cost for different kind of transportation
assign 	 StickToCycleRoute		true		# %StickToCycleRoute% 	| cycle routes will be preferred | boolean
assign	 AllowFerries			false		# %AllowFerries% 		| ferries might be used | boolean
				
# elevation cost parameters
assign  ConsiderElevation		true		# %ConsiderElevation% 	| elevation will be considered | boolean
assign  SlopeMax				8.0			# %SlopeMax% 			| maximum allowed slope (soft limit) | number

# time optimallity parameter
assign  TimeOptimallityFacotor  0.75        # %TimeOptimallityFacotor%  | Factor to include time optimality into route. 0 -- only energy optimized, 1 -- as time optimized as possible | number


################################################################
#   Constants                                                  #
################################################################

# for debug
assign processUnusedTags            = false # %processUnusedTags% | Set true to output unused tags in data tab | boolean

# Turn instruction settings
assign turnInstructionMode          = 1     # %turnInstructionMode% | Mode for the generated turn instructions | [0=none, 1=auto-choose, 2=locus-style, 3=osmand-style, 4=comment-style, 5=gpsies-style, 6=orux-style, 7=locus-old-style]
assign turnInstructionCatchingRange = 40    # %turnInstructionCatchingRange% | Within this distance (in m) several turning instructions are combined into one and the turning angles are better approximated to the general direction | number
assign turnInstructionRoundabouts   = true  # %turnInstructionRoundabouts% | Set "false" to avoid generating special turning instructions for roundabouts | boolean
assign considerTurnRestrictions     = true  # %considerTurnRestrictions% | Set true to take turn restrictions into account | boolean		

# constants for brouter algorithm
assign pass1coefficient		1.5
assign pass2coefficient		0

# set that this is a bike profile
assign validForBikes       	1

# classifier constants
assign classifier_none     	1
assign classifier_pushing  	2
assign classifier_ferry    	3

# way cost constants
assign IntialPushCost	50									# cost to dismount from bike
assign pushcost			sub div NominalSpeed 4 1			# additional cost for 4km/h walking/pushing pace
assign IntialFerryCost	switch AllowFerries	5000	99999	# average waiting time of 15min and an average cycle speed of 20km/h

# elevation parameter constants
#										speed for uphills and downhills  with "SlopeMax" 
assign SlopeMaxUphillSpeed				0										# this should be chosen as 0, since this results in the best linear approximation of the speed-over-slope curve
assign SlopeMaxDownhillSpeed			multiply div DownhillSpeed 10 SlopeMax	# scale it to the used SlopeMax
assign DownhillMaxSlopeAdditionalCost	 50	# additional cost per vertical meter for slope larger than "slopemax"
assign UphillMaxSlopeAdditionalCost  	100	# additional cost per vertical meter for slope larger than "slopemax"

# node cost constants
assign	SpeedBumpCost			10
assign	TrafficSignalCost		50
assign	TurnCostValue		   175		

# Kinematic model parameters (travel time computation)
assign maxSpeed   = 45     			# absolute maximum speed in km/h for travel time computation
assign S_C_x      = 0.576  			# drag coefficient times the reference area in m^2 for travel time computation -- http://www.kreuzotter.de/deutsch/speed.htm
assign C_r        = 0.0046 			# rolling resistance coefficient (dimensionless) for travel time computation -- 1.5x asphalt resistance http://www.kreuzotter.de/deutsch/speed.htm
assign bikerPower = NominalPower
assign totalMass  = SystemWeight 


################################################################
#   Elevation Cost Parameter Calculation                       #
################################################################

# compute equivalent length for one meter height
							#	mass * gravity / power * speed 
							#   <-------------------->
							#      height meters / s 
assign Height2Length		multiply div multiply SystemWeight 9.81 NominalPower div NominalSpeed 3.6

# the parameters are renamed in this profile to ease the use of the profile
assign slopecutoff				0.5		# slope is ignored if smaller than this threshold
assign uphillcost				switch ConsiderElevation	Height2Length	0	# cost per vertical meter
assign downhillcost				switch ConsiderElevation	0				0	# cost per vertical meter
assign elevationbufferreduce	sub SlopeMax slopecutoff
assign downhillcutoff			slopecutoff
assign uphillcutoff				slopecutoff
assign downhillmaxbuffercost	add DownhillMaxSlopeAdditionalCost downhillcost
assign uphillmaxbuffercost		add UphillMaxSlopeAdditionalCost   uphillcost
assign elevationpenaltybuffer	5
assign elevationmaxbuffer		10

################################################################
#   Speed Calculation Formulas                                 #
################################################################
# Source: http://www.kreuzotter.de/deutsch/speed.htm
#
# Surface Angle:
#---------------------------------------------------------------
# 	beta = atan(slope/100)
# with:
# 	slope - Slope of surface in % 
#
# Can be linearized for |slope| <= 17% as
# 	beta = slope/100
# with an linearization error of less than 1% 
# 
#
# Rolling Resistance:
#---------------------------------------------------------------
# 	Fr = g * m * Cr * cos(beta)
# with:
# 	g    - Gravity
# 	m    - mass of bike & rider
# 	Cr   - rolling resistance coefficiont
# 	beta - surface angle
# 
# Can be linearized for |beta| <= 8Â° or |slope| <= 14%
# 	Fr = g * m * Cr 
# with an linearization error of less than 1%. 
#
#
# Gravity Force:
#---------------------------------------------------------------
# 	Fg = g * m * sin(beta)
# with:
# 	g    - Gravity
# 	m    - mass of bike & rider
# 	beta - surface angle
# 
# Can be linearized for |slope| <= 14%
# 	Fg = g * m * slope/100
# with an linearization error of less than 1%. 
#
#
# Air Resistance
#---------------------------------------------------------------
# 	Fa = 0.5 * rho * A * cw * v^2
# with:
# 	rho - air density (kg/m^3)
# 	A   - cross sectional area
# 	cw  - drag coefficient
# 	v   - speed
#
# Can be simplified as 
# 	Fa = 0.5 * rho * Ae * v^2
# with:
# 	rho - air density (kg/m^3)
# 	Ae  - effective cross sectional area (A*cw)
# 	v   - speed
# 
#
# All together
#---------------------------------------------------------------
# 	P * n = v * ( Fr + Fg + Fa(v^2) ) 
# with:
# 	n - efficiency of the mechanical power transmission
#
#
# Further Notes
#---------------------------------------------------------------
# - there might be an additional viscous damping (proportianal to the speed)
#
#
# Typical Diagram for Speed over Slope
#---------------------------------------------------------------
# Ae = 0,6005m^2
# P  = 165W
# Cr = 0,0029
# m  = 100kg
#
#                                         ^                                     
# *.                                   62 | km/h                                
#---`*_-----------------------------------|-------------------------------------
#      `.                              58 | km/h                                
#        `*.                              |                                     
#           `*_                        54 | km/h                                
#              `.                         |                                     
#                `*.                   50 | km/h                                
#                   `.                    |                                     
#                     *.               46 | km/h                                
#                       `*_               |                                     
#                          `.          42 | km/h                                
#----------------------------`_-----------|-------------------------------------
#                              `.      38 | km/h                                
#                                `_       |                                     
#                                  `.  34 | km/h                                
#                                    `_   |                                     
#                                      `. | km/h                                
#                                        .|                                     
#                                      26 *.                                    
#                                         | *                                   
#                                      22 |  `*                                 
#-----------------------------------------|----`.-------------------------------
#                                      18 | km/h `*.                            
#                                         |         `*_                         
#                                      14 | km/h       `.                       
#                                         |              `*.                    
#                                      10 | km/h            ``*..._             
#                                         |                        ```*..._     
#                                       6 | km/h                           ```- 
#                                         |                                     
#                                       2 | km/h                                
#-+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+>
#-10%-9% -8% -7% -6% -5% -4% -3% -2% -1%  0%  1%  2%  3%  4%  5%  6%  7%  8%  9%
#                                       Slope                                   
# 
# 
# Strategy
#---------------------------------------------------------------
# Strategy is to see an increased rolling resistance as an increased slope. This
# is possible since (linearized)
# 			Fr	=	Fg
# 	g * m * Cr	=	g * m * slope/100
# with
# 	slope = Cr*100
#
# For linear slope dependency, the interpolation points will be computed with
# the linearized downhill function


---context:way   # following code refers to way-tags
################################################################
#   Determine some logic values for later use                  #
################################################################

# Cycleroute
#---------------------------------------------------------------

# logical if way is part of a cycleroute
assign any_cycleroute 	 
	or route_bicycle_icn=yes 
	or route_bicycle_ncn=yes 
	or route_bicycle_rcn=yes 
	   route_bicycle_lcn=yes


# Cycleway
#---------------------------------------------------------------

# cycleway / Fahrradstreifen
# the flag is generated by checking if the opposite - so no cycleway - is true
# and than inverting this information
assign hascycleway
	not and ( or cycleway=  cycleway=no|shared_lane|proposed ) 
		or  ( and     reversedirection=yes or cycleway:left=  cycleway:left=no|shared_lane   )		# shared lane are only bike signs on the street surface
		    ( and not reversedirection=yes or cycleway:right= cycleway:right=no|shared_lane  )
# https://taginfo.openstreetmap.org/keys/cycleway (11-2018)
# 750 000 tags "cycleway"
# 140 000 tags "cycleway:right"
#  60 000 tags "cycleway:left"
			
# protected bike lanes or bicycle roads
assign hascycleway_track	
	or ( bicycle_road=yes )	#   7 342 tags "bicycle_road=yes"
	or ( cycleway=track ) 	# 114 000 tags "cycleway=track"
	or ( and     reversedirection=yes or cycleway:left=track|opposite_track or cycleway:right=opposite_track  cycleway=opposite_track )		
	   ( and not reversedirection=yes    cycleway:right=track )
# https://taginfo.openstreetmap.org/keys/cycleway (11-2018)
# 114 000 tags "cycleway=track"						
#  36 000 tags "cycleway:right=track"
#  14 000 tags "cycleway:left=track"
#   2 000 tags "cycleway=opposite_track"
#     300 tags "cycleway:right=opposite_track"
#     350 tags "cycleway:left=opposite_track"


# Access
#---------------------------------------------------------------

#
# implicit access here just from the motorroad tag
# (implicit access rules from highway tag handled elsewhere)
#
assign defaultaccess =
	if access=private|no then false
	else true

#
# bike access
#
assign bikeaccess
	if any_cycleroute then true
	else if bicycle= then
	(
		if vehicle= then
			if      highway=footway|pedestrian|steps then false
			else if foot=designated                  then false			# there are ways without vehicle or bicycle tag which are only a designated foot way.
			else defaultaccess
		else not vehicle=private|no
	)
	else not bicycle=private|no|dismount

#
# foot access
#
assign footaccess =
	if bikeaccess then true
	else if bicycle=dismount then true
	else if foot= then defaultaccess
	else not foot=private|no

#
# oneway accessed in reversed and forbidden direction
#
assign badoneway =
	if reversedirection=yes then					
		if 		( oneway:bicycle=yes 									) then true	
		else if ( cycleway=opposite|opposite_lane|opposite_track 		) then false
		else if ( cycleway:left=opposite|opposite_lane|opposite_track	) then false
		else if ( cycleway:right=opposite|opposite_lane|opposite_track	) then false
		else if ( oneway:bicycle=no                               		) then false
		else if ( and oneway= junction=roundabout						) then true
		else if ( oneway=yes|true|1										) then true
		else false
	else 
		if 		( oneway=-1												) then true
		else false	


################################################################
#   Store if node access is granted independently of node type #
################################################################

# if way is part of cycleroute, all nodes can be accessed
# "nodeaccessgranted" is the only "way" context variable which is available in 
# the "node" context
assign nodeaccessgranted 
	or any_cycleroute 
		lcn=yes


################################################################
#   Access Costs                                               #
################################################################

#
# if not bike-, but foot-acess, just a moderate penalty,
# otherwise access is forbidden
#
assign accesspenalty =
	if      bikeaccess then 0
	else if footaccess then pushcost
	else                    100000

#
# handle one-ways. On primary roads, wrong-oneways should
# pushcost to the costfactor (making it at least pushcost - you are allowed
# be close to forbidden, while on other ways we just add
# to push your bike)
#
assign onewaypenalty =
       if ( badoneway ) then
       (
         if      ( highway=primary|primary_link     ) then 50
         else if ( highway=secondary|secondary_link ) then 30
         else if ( highway=tertiary|tertiary_link   ) then 20
         else 											   pushcost
       )
       else 0.0

# 
# store if this way segment can only be accessed by pushing
#
assign ispushing
	switch and footaccess not bikeaccess	true
	switch highway=steps 					true
											false


################################################################
#   Handle different surfaces                                  #
################################################################

# Different Rolling resistances for car tires
#
# DE-Wikipedia: https://de.wikipedia.org/wiki/Rollwiderstand
# Rhetos: https://www.rhetos.de/html/lex/rollwiderstandskoeffizienten.htm
# KfT:  "Kraftfahrtechnisches Taschenbuch", page 418
#
# Surface      | norm | used  | DE-Wikipedia  | Rhetos       | comment
# -------------+------+-------+---------------+--------------+------------------
# asphalt      |  1.0 | 0.01  | 0.011 - 0.015 | 0.011 - 0.03 | good asphalt
# concrete     |  1.1 | 0.011 | 0.01  - 0.02  | 0.01  - 0.02 | quite good concrete
# metal        |  1.1 | 0.011 |               | 0.008 - .009 | it is slippery :-(
# paving_stones|  1.5 | 0.015 | 0.013 (KfT)   |              | 
# compacted    |  1.8 | 0.018 |               |              | between paving_stone and cobblestone
# wood         |  1.8 | 0.018 |               |              | between paving_stone and cobblestone (most on bridges with small gaps)
# sett         |  2.0 | 0.02  |               |              | between paving_stone and cobblestone
# pebblestone  |  2.4 | 0.024 |               |              | between gravel and compacted
# copplestone  |  2.5 | 0.025 | 0.015 - 0.03  | 0.015 - 0.03 | bike tires are small
# grass_paver  |  2.7 | 0.027 |               |              | even worse than cobblestone but better than gravel
# gravel       |  3.0 | 0.03  | 0.02          | 0.02         | bike tires are small
# ground       |  3.4 | 0.034 |               |              | between compacted and dirt
# fine_gravel  |  4.0 |       |               |              | most likely pushing the bike ==> pushcost
# dirt         |  5.0 | 0.05  | 0.050         | 0.050        |
# sand         | 10.0 | 0.1   | 0.04  - 0.08  | 0.1   - 0.35 | compacted sand, bike tires are thin
# mud          | 15.0 |       |               |              | really don't want to be there
# potholes     |      |       | 0.03  - 0.06  |              | ashpalt with potholes
# clay         | compacted
# earth        | dirt
# grass        | dirt
# paved        | concrete
# unpaved      | dirt

# Assign costs 
assign   ConcreteCost            0.1
assign   MetalCost               0.1
assign   PavingStonesCost        0.5
assign   CompactedCost           0.8
assign   WoodCost                0.8
assign   SettCost				 1.0
assign   PebblestoneCost         1.4
assign   CobblestoneCost  		 1.5
assign   GrassPaverCost          1.7
assign   GravelCost              2.0
assign   GroundCost              2.4
assign   FineGravelCost          3.0
assign   DirtCost                4.0
assign   SandCost                9.0	
assign   MudCost                14.0		
assign   PavingUnsureCost       GroundCost	


# cost factors
assign surfacecost	# 23Mio tags (11-2018) - https://taginfo.openstreetmap.org/keys/surface#values
    # 
    # Use cycleway surface with highest priority, since we use cycleways if 
    # available
    switch cycleway:surface=asphalt         0.0
    switch cycleway:surface=concrete|paved  ConcreteCost
    switch cycleway:surface=paving_stones   PavingStonesCost
    switch cycleway:surface=compacted       CompactedCost
    switch cycleway:surface=sett            SettCost
    switch cycleway:surface=cobblestone     CobblestoneCost
    switch cycleway:surface=gravel          GravelCost
    switch cycleway:surface=fine_gravel     FineGravelCost
    switch cycleway:surface=unpaved         DirtCost
    #
    # Highway surface
    switch surface=asphalt                  0.0
    switch 
        or surface=concrete|paved 
           and surface= tracktype=grade1    ConcreteCost
    switch surface=metal                    MetalCost
    switch surface=paving_stones            PavingStonesCost
    switch surface=compacted|clay           CompactedCost
    switch surface=wood                     WoodCost
    switch surface=sett                     SettCost
    switch surface=pebblestone              PebblestoneCost
    switch surface=cobblestone              CobblestoneCost
    switch surface=grass_paver              GrassPaverCost
    switch surface=gravel                   GravelCost
    switch surface=ground                   GroundCost
    switch surface=fine_gravel              FineGravelCost
    switch surface=unpaved|dirt|earth|grass DirtCost
    switch surface=sand                     SandCost
    switch surface=mud                      MudCost
    #
	# best guess for unsure paving:
	switch highway=raceway                  0.0                 # Rennstrecke
	switch highway=motorway|motorway_link   0.0					# Autobahn und Auffahrten
	switch highway=trunk|trunk_link      	0.0					# SchnellstraÃen (wie BAB) und Auffahrten
	switch highway=primary|primary_link    	0.0					# BundesstraÃen und Auffahrten
	switch highway=secondary|secondary_link	0.0					# LandstraÃen und Auffahrten
	switch highway=tertiary|tertiary_link   0.0					# KreisstraÃen und Auffahrten
	switch highway=unclassified       		0.0					# DorfstraÃen	  
	switch highway=residential 				0.0					# WohnstraÃe
	switch highway=rest_area|services       0.0                 # Rastplatz
	switch highway=corridor                 0.0                 # Hallway inside a building
	switch highway=crossing                 0.0                 # Street crossing
	switch highway=bus_stop                 0.0                 # Bus stop on the street
	switch highway=mini_roundabout          0.0                 # Mini roundabout in the street
	switch highway=turning_loop             0.0                 # Turning Loop
	switch highway=platform                 PavingStonesCost    # Bushaltestelle (wo die Personen stehen)
	switch highway=living_street 			PavingStonesCost	# SpielstraÃe
	switch highway=pedestrian   			SettCost    		# FuÃgÃ¤ngerzone
	switch highway=service                  PavingStonesCost    # ZugangsstraÃen
	switch highway=bridleway                CompactedCost       # Reit- und FuÃweg
	switch highway=cycleway                 PavingStonesCost    # Radweg
	switch highway=footway  				GroundCost	        # Gehweg
	switch highway=path  					GroundCost          # path of unknown kind
	switch highway=unsurfaced               GroundCost          # street without surface
	switch highway=road						PavingUnsureCost	# unbekannter Typ
	#
	# for highway=track, check the tracktype
	switch and highway=track tracktype=grade1               0.0             # Asphalt surface
	switch and highway=track tracktype=grade2               CompactedCost   # mostly solid
	switch and highway=track tracktype=grade3   multiply 2  CompactedCost   # Even mixture of hard and soft materials.
	switch and highway=track tracktype=grade4               GroundCost      # Mostly soft
	switch and highway=track tracktype=grade5               DirtCost        # soft
	switch and highway=track tracktype=                     DirtCost        # unknown, but most likely soft
	#
	# Default if really unknown
	                                            PavingUnsureCost


assign smoothnesscost	# 1.34 Mio tags (11-2018) - https://taginfo.openstreetmap.org/keys/smoothness#values
	# http://wiki.openstreetmap.org/wiki/Key:smoothness
	switch smoothness=excellent|very_good				 		0.0					# thin_rollers - roller blade, skate board
	switch smoothness=good		 				multiply 0.5	PavingStonesCost	# thin_wheels - racing bike
	switch smoothness=intermediate            	            	PavingStonesCost	# wheels - city bike, wheel chair, sport cars
	switch smoothness=bad|robust_wheels       			 		CobblestoneCost		# robust wheels - trekking bike, normal cars
	switch smoothness=very_bad|high_clearance 			 		DirtCost			# high clearance - normal cars with slightly higher clearance
	switch smoothness=horrible|off_road_wheels	multiply 2		DirtCost			# off road wheels - off road cars 
	switch smoothness=very_horrible           	multiply 2		MudCost			    # specialized off road vehicles - ATV, tractor
	switch smoothness=impassable              	multiply 5		pushcost			# no wheeled vehicle - hiking path 
	#
	# If smoothness is not given, estimate smoothness on mtb:scale property
	switch mtb:scale=0                                          DirtCost            # Gravel or packed earth. No particular difficulties. --> smoothness=very_bad
	switch mtb:scale=1                          multiply 2		DirtCost            # roots and small stones. --> smoothness=horrible
	switch mtb:scale=2                          multiply 3		pushcost            # large rocks and stones. --> smoothness=mean(horrible & very_horrible)
	switch mtb:scale=2                          multiply 4		pushcost            # large obstacles such as boulders and large roots. --> smoothness=very_horrible
	switch mtb:scale=4                          multiply 5		pushcost            # large boulders, roots. --> smoothness=mean(very_horrible & impassable)
	switch mtb:scale=5                          multiply 6		pushcost            # big boulder fields, debris, landslides.  --> smoothnes=impassable
	switch mtb:scale=6                          multiply 7		pushcost            # more than impassable :-)
																surfacecost			# not known
												
# use mean value of both, otherwise it is penalized twice
assign mean_surface_smoothness_cost
	multiply 0.5 add surfacecost smoothnesscost


################################################################
#   Max allowed speed                                          #
################################################################

# The maximum allowed speed is used for traffic cost calculation and for routing 
# in case of lower allowed speed than reachable speed on the bike

# km/h
assign maxspeedbackward
		switch maxspeed:backward=10		 10
		switch maxspeed:backward=20		 20
		switch maxspeed:backward=30		 30
		switch maxspeed:backward=40		 40
		switch maxspeed:backward=50		 50
		switch maxspeed:backward=60		 60	
		switch maxspeed:backward=70		 70
		switch maxspeed:backward=80		 80
		switch maxspeed:backward=90		 90
		switch maxspeed:backward=100	100
		switch maxspeed:backward=110	110
		switch maxspeed:backward=120	120
		switch maxspeed:backward=130	130
		switch maxspeed:backward=urban	 50		
		switch maxspeed:backward=rural	100
										999		

# km/h	
assign maxspeedforward
		switch maxspeed:forward=10		 10
		switch maxspeed:forward=20		 20
		switch maxspeed:forward=30		 30
		switch maxspeed:forward=40		 40
		switch maxspeed:forward=50		 50
		switch maxspeed:forward=60		 60	
		switch maxspeed:forward=70		 70
		switch maxspeed:forward=80		 80
		switch maxspeed:forward=90		 90
		switch maxspeed:forward=100		100
		switch maxspeed:forward=110		110
		switch maxspeed:forward=120		120
		switch maxspeed:forward=130		130
		switch maxspeed:forward=urban	 50		
		switch maxspeed:forward=rural	100
										999	

# km/h
assign maxspeed
        min    70                                       # Max wanted speed on a road bike :-) 
		switch and not reversedirection=yes lesser maxspeedforward  999		maxspeedforward
		switch and     reversedirection=yes lesser maxspeedbackward 999		maxspeedbackward
		switch maxspeed=10							 10
		switch maxspeed=20							 20
		switch maxspeed=30							 30
		switch maxspeed=40							 40
		switch maxspeed=50							 50
		switch maxspeed=60							 60	
		switch maxspeed=70							 70
		switch maxspeed=80							 80
		switch maxspeed=90							 90
		switch maxspeed=100							100
		switch maxspeed=110							110
		switch maxspeed=120							120
		switch maxspeed=130							130
		switch maxspeed=urban						 50		
		switch maxspeed=rural						100	
		switch bicycle=designated					 30 # Max. Geschw. bei Fahrradstreifen wird unabhaengig von der Art der Strasse zu 30km/h angenommen
		switch highway=motorway|motorway_link   	130 # Autobahn (BAB) und Auffahrten
		switch motorroad=yes						120 # KraftfahrstraÃe (wie BAB)
		switch highway=trunk|trunk_link      		120 # SchnellstraÃen (wie BAB) und Auffahrten
		switch highway=primary|primary_link     	100 # BundesstraÃen und Auffahrten
		switch highway=secondary|secondary_link 	100 # LandstraÃen und Auffahrten
		switch highway=tertiary|tertiary_link   	100 # KreisstraÃen und Auffahrten
		switch highway=unclassified       			 50 # DorfstraÃen
		switch highway=residential 					 30 # WohnstraÃe
		switch highway=service                  	 30 # ZugangsstraÃen
		switch highway=living_street 				 15 # SpielstraÃe
		switch highway=pedestrian   				  4 # FuÃgÃ¤ngerzone
		switch highway=bridleway                	  5 # Reit- und FuÃweg
		switch highway=cycleway                 	 30 # Radweg
		switch highway=footway  					  5 # Gehweg
		switch highway=path  					    999 # Pfad
		switch highway=track 						999 # Feldweg
		switch highway=road							999 # unbekannter Typ
		switch route=ferry                      	 10 # FÃ¤hren
		switch highway=steps                    	  2 # Treppen
													999 # Default (unknown max speed)


################################################################
#   Handle speed                                               #
################################################################

# Speed with rolling resistance included
assign bikespeed 			div NominalSpeed  			add 1 mean_surface_smoothness_cost
assign bikespeeduphill		div SlopeMaxUphillSpeed		add 1 mean_surface_smoothness_cost
assign bikespeeddownhill	div SlopeMaxDownhillSpeed	add 1 mean_surface_smoothness_cost


# routing should be at least partially done time optimal
#
# I know, that this way of computing is not completely correct, but I do not know any better solution in brouter
#
assign speedpenaltyfactor			add 1 multiply TimeOptimallityFacotor sub max 1 div bikespeed         maxspeed 1
assign speedpenaltyuphillfactor		add 1 multiply TimeOptimallityFacotor sub max 1 div bikespeeduphill   maxspeed 1
assign speedpenaltydownhillfactor	add 1 multiply TimeOptimallityFacotor sub max 1 div bikespeeddownhill maxspeed 1

################################################################
#   Handle traffic                                             #
################################################################

# actual speed of vehicles will be estimated by the minimum of the taged max speed and some estimations (for Germany)
assign vehiclespeed
	min maxspeed	
	switch highway=motorway|motorway_link   130	# Autobahn (BAB) und Auffahrten
	switch motorroad=yes					130	# KraftfahrstraÃe (wie BAB)
	switch highway=trunk|trunk_link      	120	# SchnellstraÃen (wie BAB) und Auffahrten
	switch highway=primary|primary_link     100	# BundesstraÃen und Auffahrten
	switch highway=secondary|secondary_link  90	# LandstraÃen und Auffahrten
	switch highway=tertiary|tertiary_link    80	# KreisstraÃen und Auffahrten
	switch highway=unclassified       		 40	# DorfstraÃen	  
	switch highway=residential 				 30	# WohnstraÃe
	switch highway=service                   20	# ZugangsstraÃen
	switch highway=living_street 			 10	# SpielstraÃe
											  0 # Default (no street for vehicle)
	

# Remark: current DTV in Baden-WÃ¼rttemberg (Germany)
# BundestraÃe:	14263 vehicle/day	-- https://www.bast.de/BASt_2017/DE/Statistik/Verkehrsdaten/2015/Fahrleistungen-2015.pdf?__blob=publicationFile&v=6
# LandstraÃe:	 4718 vehicle/day	-- https://www.svz-bw.de/fileadmin/verkehrszaehlung/vm/rpt-95-vm-2010-mdtv-l-str.pdf
# KreisstraÃe:	 2309 vehicle/day	-- https://www.svz-bw.de/fileadmin/verkehrszaehlung/vm/rpt-95-vm-2010-mdtv-k-str.pdf
# DorfstraÃe:
# WohnstraÃe:

# traffic estimation due to different kind of ways
# cost are normalized costs for one specific case: speed difference between vehicles and bike is seen as 30km/h (50km/h vehicles and 20km/h bike).
# Other speed differences are scaled accordingly later on
assign trafficcost_way	# 128 Mio tags,  (11-2018) - https://taginfo.openstreetmap.org/keys/smoothness#values	
	switch highway=trunk|trunk_link      	    1.2		# SchnellstraÃen (wie BAB) und Auffahrten
	switch highway=primary|primary_link     	0.6		# BundesstraÃen und Auffahrten
	switch highway=secondary|secondary_link 	0.2		# LandstraÃen und Auffahrten
	switch highway=tertiary|tertiary_link   	0.1		# KreisstraÃen und Auffahrten
	switch highway=unclassified       			0.0		# DorfstraÃen	  
	switch highway=residential 					0.0		# WohnstraÃe
	switch highway=service                  	0.0 	# ZugangsstraÃen
	switch highway=living_street 				0.0		# SpielstraÃe
	switch highway=pedestrian   				0.0		# FuÃgÃ¤ngerzone
	switch highway=bridleway                	0.0		# Reit- und FuÃweg
	switch highway=cycleway                 	0.0		# Radweg
	switch highway=footway  					0.0		# Gehweg
	switch highway=path  						0.0		# Pfad 
	switch highway=track 						0.0		# Feldweg
	switch highway=road							0.0		# unbekannter Typ
												0.0		# Default	

# Different traffic classes
# Source -- https://forum.openstreetmap.org/viewtopic.php?id=31044
# Quote:
# Die Verkehrssumme drÃ¼ckt grob gesagt aus, wieviel Meter Wohnstrasse (oder <= Tempo50 Strasse) eine Strasse versorgt, wobei diese Versorgungsbeziehung noch entfernungsabhÃ¤ngig untersrÃ¼ckt wird mit 20km LÃ¤ngenskala.  FÃ¼r das Pseudotag wird dieser Wert logarithmiert bzw. folgendermassen gemappt:
# 
# summe >   5000   estimated_traffic_class=1
# summe >  10000   estimated_traffic_class=2
# summe >  20000   estimated_traffic_class=3
# summe >  40000   estimated_traffic_class=4
# summe >  80000   estimated_traffic_class=5
# summe > 160000   estimated_traffic_class=6
# summe > 320000   estimated_traffic_class=7
#

# cost are normalized costs: speed difference between vehicles and bike is seen as 30km/h (50km/h vehicles and 20km/h bike).
# Smaller speed differences are scaled accordingly
assign trafficcost_classes
	if      estimated_traffic_class=1   then 0.1
	else if estimated_traffic_class=2   then 0.2
	else if estimated_traffic_class=3   then 0.4
	else if estimated_traffic_class=4   then 0.8
	else if estimated_traffic_class=5	then 1.6
	else if estimated_traffic_class=6	then 3.2
	else if estimated_traffic_class=7	then 6.4
	else                                     0

# Mean cost for both traffic indicators. 
# Traffic indicator by way class is weighted double
assign trafficostmean div add trafficcost_classes multiply 2 trafficcost_way 3

# Treat traffic penalty differently for cycling lanes		
assign trafficostraw 
	multiply trafficostmean 
		switch hascycleway_track	0.00
		switch hascycleway 			0.5 
									1.0

# Scale traffic cost to speed differences 
assign trafficpenalty 			multiply trafficostraw max 0 div sub vehiclespeed bikespeed			30	
assign trafficpenaltyuphill 	multiply trafficostraw max 0 div sub vehiclespeed bikespeeduphill	30
assign trafficpenaltydownhill 	multiply trafficostraw max 0 div sub vehiclespeed bikespeeddownhill	30


################################################################
#   Handle different kinds of ways                             #
################################################################


# here only costs not handled by the other parts are applied
assign highwaycost	# 128 Mio tags,  (11-2018) - https://taginfo.openstreetmap.org/keys/smoothness#values
	
	# disallow non existing highways, motorways and motorroads
	switch and highway= not route=ferry  				10000	# exclude rivers, rails etc.
	switch    highway=proposed|abandoned|construction   10000	# Baustellen 
	
	#
	# all other exclusions below (access, steps, ferries,..)
	# should not be deleted by the decoder, to be available
	# in voice-hint-processing (if cost are >=10000, the decoder will delete them)

	# highway cost
	switch highway=motorway|motorway_link    9999		# Autobahn (BAB) und Auffahrten
	switch motorroad=yes					 9999		# KraftfahrstraÃe (wie BAB)
	switch highway=trunk|trunk_link      	   10		# SchnellstraÃen (wie BAB) und Auffahrten
	switch bicycle_road=yes						0.0		# FahrradrstraÃen
	switch highway=primary|primary_link     	0.0		# BundesstraÃen und Auffahrten
	switch highway=secondary|secondary_link 	0.0		# LandstraÃen und Auffahrten
	switch highway=tertiary|tertiary_link   	0.0 	# KreisstraÃen und Auffahrten
	switch highway=unclassified       			0.1		# DorfstraÃen		(mehr Kreuzungen)
	switch highway=residential 					0.15	# WohnstraÃe		(mehr Kreuzungen)
	switch highway=service                  	0.2 	# ZugangsstraÃen	(mehr Kreuzungen)
	switch highway=living_street 				0.15	# SpielstraÃe		(mehr Kreuzungen)
	switch highway=pedestrian   				0.0		# FuÃgÃ¤ngerzone
	switch highway=bridleway                	0.0		# Reit- und FuÃweg
	switch highway=cycleway                 	0.0		# Radweg
	switch highway=footway  					0.0		# Gehweg
	switch highway=path  						0.3 	# Pfad 
	switch highway=track 						0.0		# Feldweg
	switch highway=road							0.0		# unbekannter Typ
	switch route=ferry                      	0.0 	# FÃ¤hren
	switch highway=steps                        0.0		# Treppen
												0.0		# Default
												

################################################################
#   Handle miscellaneous costs                                 #
################################################################

# for one-ways which are allowed to be accessed in "wrong"
# direction by bike, add a small penalty to reduce usage of them
assign onewaycost
	switch and and reversedirection=yes oneway=yes|true|1 oneway:bicycle=no	0.15	0
	
# prefer cycleroutes
assign cycleroutefavor 
	switch and StickToCycleRoute any_cycleroute		-0.15	0
	
################################################################
#   Final calculation of cost factor                           #
################################################################
	
#
# calculate the cost-factor, which is the factor
# by which the distance of a way-segment is multiplied
# to calculate the cost of that segment. The costfactor
# must be >=1 and it's supposed to be close to 1 for
# the type of way the routing profile is searching for
#

# common cost independently of slope
assign commoncostfactor
	#
	# exceptions with sub-cost below 10000 (motorway, bad one-way, ...)  should not be deleted
	# by the decoder, to be available in voice-hint-processing (if cost are >=10000, the decoder will delete them)
	switch 
		greater 					# if any penalty ...
			max onewaypenalty
			max accesspenalty 
				highwaycost
		9999 						# ... is larger 9999 ...
		10000						# ... then take 10000 (forbidden) ...
									# ... else take the following:
	min 9999								# make sure that costfactor is less or equal 9999
	add 1									# one is the minimum cost
	add max onewaypenalty accesspenalty		# oneway and access penalty
	add highwaycost							# cost for different types of highway
	add	onewaycost							# cost for cycling against oneways for cars only
		cycleroutefavor						# (negative) cost for cycleroutes
	

# for flat terrain
assign costfactor
	min 9999								# make sure that costfactor is less or equal 9999
	add commoncostfactor					# common cost independently of slope
	add										# surface and smoothness cost times speed limit cost
		sub
			multiply
				speedpenaltyfactor 
				add 
					1
					mean_surface_smoothness_cost
		1
		trafficpenalty						# traffic cost
	
# for uphill terrain
assign uphillcostfactor
	min 9999								# make sure that costfactor is less or equal 9999
	add commoncostfactor					# common cost independently of slope
	add 									# surface and smoothness cost times speed limit cost
		sub 
			multiply 
				speedpenaltyuphillfactor 
				add 
					1
					mean_surface_smoothness_cost
		1
		trafficpenaltyuphill				# traffic cost
		
# for downhill terrain		
assign downhillcostfactor
	min 9999								# make sure that costfactor is less or equal 9999
	add commoncostfactor					# common cost independently of slope
	add 									# surface and smoothness cost times speed limit cost
		sub 
			multiply 
				speedpenaltydownhillfactor 
				add 
					1
					mean_surface_smoothness_cost	
		1
		trafficpenaltydownhill				# traffic cost
	
################################################################
#   Initial Costs                                              #
################################################################

#
# for any change in initialclassifier, initialcost is added once
#
assign initialclassifier =
     if      route=ferry then classifier_ferry
     else if ispushing   then classifier_pushing 
	 else	classifier_none 				  
#
# calculate the initial cost
# this is added to the total cost each time the costfactor
# changed
#
assign initialcost =
	switch ( equal initialclassifier classifier_ferry   )	IntialFerryCost
	switch ( equal initialclassifier classifier_pushing )	IntialPushCost
															0	   


################################################################
#   Turn Costs                                                 #
################################################################

# this is the cost (in Meter) for a 90-degree turn
# The actual cost is calculated as turncost*cos(angle)
# Turncost is scaled by the cost for speed of the bike, surface and speed limit.
# The faster you go, the less you want to turn because thet means deceleration
#
assign turncost = if junction=roundabout then 0
                  else TurnCostValue

	   
################################################################
#   Voice hint generation stuff                                #
################################################################

# way priorities used for voice hint generation

assign priorityclassifier =
  if      ( highway=motorway                  ) then  30
  else if ( highway=motorway_link             ) then  29
  else if ( highway=trunk                     ) then  28
  else if ( highway=trunk_link                ) then  27
  else if ( highway=primary                   ) then  26
  else if ( highway=primary_link              ) then  25
  else if ( highway=secondary                 ) then  24
  else if ( highway=secondary_link            ) then  23
  else if ( highway=tertiary                  ) then  22
  else if ( highway=tertiary_link             ) then  21
  else if ( highway=unclassified              ) then  20
  else if ( highway=residential|living_street ) then  6
  else if ( highway=service                   ) then  6
  else if ( highway=cycleway                  ) then  6
  else if ( bicycle=designated                ) then  6
  else if ( highway=track                     ) then if tracktype=grade1 then 6 else 4
  else if ( highway=bridleway|road|path|footway ) then  4
  else if ( highway=steps                     ) then  2
  else if ( highway=pedestrian                ) then  2
  else 0


# some more classifying bits used for voice hint generation...

assign isbadoneway = not equal onewaypenalty 0
assign isgoodoneway = if reversedirection=yes then oneway=-1
                      else if oneway= then junction=roundabout else oneway=yes|true|1
assign isroundabout = junction=roundabout
assign islinktype = highway=motorway_link|trunk_link|primary_link|secondary_link|tertiary_link
assign isgoodforcars = if greater priorityclassifier 6 then true
                  else if highway=residential|living_street|service then true
                  else if ( and highway=track tracktype=grade1 ) then true
                  else false
				  
				  
################################################################
#   Save some information for node context                     #
################################################################
assign isnarrow if highway=path then true else false

################################################################################
# Context Switch ###############################################################
################################################################################
---context:node  # following code refers to node tags



################################################################
#   Determine some logic values for later use                  #
################################################################

# Access
#---------------------------------------------------------------

assign defaultaccess
       switch access=
              1 # add default barrier restrictions here!
              switch or access=private access=no
                     0
                     1

assign bikeaccess
       or nodeaccessgranted=yes
          switch bicycle=
                 switch vehicle=
                        defaultaccess
                        switch or vehicle=private vehicle=no
                               0
                               1
                 switch or bicycle=private or bicycle=no bicycle=dismount
                        0
                        1

assign footaccess
       or bicycle=dismount
          switch foot=
                 defaultaccess
                 switch or foot=private foot=no
                        0
                        1
						
						
################################################################
#   Assign Node Cost                                           #
################################################################
# Assign Cost to node:
assign initialcost
  switch bikeaccess
    0 
    switch footaccess
      300
      1000000

#
# Cost for traffic lights and traffic calming
#
assign istrafficsignal	
	or highway=traffic_signals crossing=traffic_signals 

assign initialcost 
	add initialcost
	add	switch istrafficsignal						TrafficSignalCost	0
	add switch traffic_calming=bump|hump|dip		SpeedBumpCost		0
	add	switch and way:isnarrow barrier=bollard		TrafficSignalCost	0
		switch and not way:isnarrow barrier=bollard 10					0
	
																					
